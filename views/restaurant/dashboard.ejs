<!DOCTYPE html>
<html lang="tr">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="icon" href="/ituyemek_logo.png" type="image/png">
    <title>Ana Sayfa - Restoran Paneli</title>
    <style>
        :root {
            --bg-color: #f5f9ff;
            --text-color: #333;
            --sidebar-bg: linear-gradient(180deg, #1e3a8a, #3b82f6);
            --sidebar-text: #fff;
            --card-bg: #fff;
            --card-border: #dbeafe;
            --table-header-bg: #eff6ff;
            --table-border: #e5e7eb;
            --secondary-text: #64748b;
            --button-bg: #3b82f6;
            --button-hover: #2563eb;
            --status-hazir: #22c55e;
            --status-hazirlanıyor: #f97316;
            --status-iptal: #ef4444;
            --status-on-the-way: #f59e0b;
            --status-pending: #f97316;
            --status-bilinmeyen: #6b7280;
            --rating-color: #f59e0b;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
            --modal-bg: rgba(0, 0, 0, 0.6);
            --border-radius: 8px;
            --transition: all 0.3s ease;
        }

        .dark-theme {
            --bg-color: #1a202c;
            --text-color: #a3bffa;
            --sidebar-bg: linear-gradient(180deg, #1e3a8a, #2a4365);
            --sidebar-text: #e2e8f0;
            --card-bg: #2d3748;
            --card-border: #4a5568;
            --table-header-bg: #2d3748;
            --table-border: #4a5568;
            --secondary-text: #a0aec0;
            --button-bg: #4fd1c5;
            --button-hover: #38b2ac;
            --status-hazir: #48bb78;
            --status-hazirlanıyor: #f6ad55;
            --status-iptal: #e53e3e;
            --status-on-the-way: #ecc94b;
            --status-pending: #f6ad55;
            --status-bilinmeyen: #6b7280;
            --rating-color: #ecc94b;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            --modal-bg: rgba(0, 0, 0, 0.8);
        }

        body {
            font-family: 'Montserrat', sans-serif;
            background-color: var(--bg-color);
            margin: 0;
            padding: 0;
            display: flex;
            min-height: 100vh;
            color: var(--text-color);
            transition: var(--transition);
        }

        .notification.success {
            border-left: 4px solid var(--status-hazir);
        }

        .notification.error {
            border-left: 4px solid var(--status-iptal);
        }

        .notification span {
            color: var(--text-color);
            font-size: 14px;
        }

        .notification .close-btn {
            background: none;
            border: none;
            color: var(--secondary-text);
            cursor: pointer;
            font-size: 16px;
        }

        .notification-flash {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 0, 0, 0.1);
            animation: flash 0.5s;
            pointer-events: none;
            z-index: 9999;
        }

        .btn-print {
            background: #28a745;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 5px;
            font-size: 12px;
        }

        .btn-print:hover {
            background: #218838;
        }

        .btn-print i {
            margin-right: 4px;
        }




        @keyframes flash {

            0%,
            100% {
                opacity: 0;
            }

            50% {
                opacity: 1;
            }
        }


        .hamburger-btn {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 1001;
            background: var(--button-bg);
            color: var(--sidebar-text);
            border: none;
            width: 45px;
            height: 45px;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 18px;
            box-shadow: var(--shadow);
            transition: var(--transition);
        }

        .hamburger-btn:hover {
            background: var(--button-hover);
        }

        .sidebar-overlay {
            display: block;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: var(--modal-bg);
            z-index: 999;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .sidebar-overlay.active {
            opacity: 1;
            pointer-events: auto;
        }

        .sidebar {
            width: 260px;
            background: var(--sidebar-bg);
            color: var(--sidebar-text);
            padding: 20px 0;
            position: fixed;
            height: 100vh;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            transition: var(--transition);
            overflow-y: auto;
        }

        .sidebar-close-btn {
            display: none;
            position: absolute;
            top: 15px;
            right: 15px;
            background: none;
            border: none;
            color: var(--sidebar-text);
            font-size: 24px;
            cursor: pointer;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            transition: var(--transition);
        }

        .sidebar-close-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .sidebar h2 {
            font-size: 22px;
            margin: 20px;
            text-align: center;
            font-weight: 600;
        }

        .sidebar a {
            display: flex;
            align-items: center;
            padding: 15px 30px;
            text-decoration: none;
            color: var(--sidebar-text);
            font-size: 16px;
            font-weight: 500;
            transition: var(--transition);
            border-left: 4px solid transparent;
            cursor: pointer;
        }

        .sidebar a:hover,
        .sidebar a.active-link {
            background-color: var(--button-hover);
            border-left-color: var(--sidebar-text);
        }

        .sidebar a i {
            margin-right: 12px;
            font-size: 18px;
        }

        .main-content {
            margin-left: 260px;
            padding: 40px;
            flex-grow: 1;
            background-color: var(--bg-color);
            transition: var(--transition);
            width: calc(100% - 260px);
            box-sizing: border-box;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }

        .page-header h1 {
            font-size: 28px;
            font-weight: 700;
            color: var(--text-color);
            margin: 0;
        }

        .page-header p {
            font-size: 14px;
            color: var(--secondary-text);
            margin: 5px 0 0;
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 20px;
        }

        .slider-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 8px;
            margin-top: -22px;
            margin-right: -10px;
        }

        .slider-wrapper {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .slider-label {
            font-size: 14px;
            font-weight: bold;
            color: var(--secondary-text);
            white-space: nowrap;
            line-height: 1;
            margin-left: 17px;
        }

        .slider-label-close {
            font-size: 14px;
            font-weight: 600;
            color: var(--status-iptal);
        }

        .slider-label-open {
            font-size: 14px;
            font-weight: 600;
            color: var(--status-hazir);
        }

        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 30px;
        }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: var(--status-iptal);
            transition: .4s;
            border-radius: 15px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked+.slider {
            background-color: var(--status-hazir);
        }

        input:checked+.slider:before {
            transform: translateX(30px);
        }

        .sound-toggle {
            background-color: var(--button-bg);
            color: var(--sidebar-text);
            border: none;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            height: 30px;
            line-height: 1;
        }

        .sound-toggle:hover {
            background-color: var(--button-hover);
        }

        .sound-toggle i {
            font-size: 18px;
        }

        .theme-toggle {
            background-color: var(--button-bg);
            color: var(--sidebar-text);
            border: none;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 8px;
            height: 30px;
            line-height: 1;
        }

        .theme-toggle:hover {
            background-color: var(--button-hover);
        }

        .theme-toggle .sun,
        .theme-toggle .moon {
            font-size: 18px;
            transition: opacity 0.3s;
        }

        .theme-toggle .sun.active,
        .theme-toggle .moon.active {
            opacity: 1;
        }

        .theme-toggle .sun:not(.active),
        .theme-toggle .moon:not(.active) {
            opacity: 0.3;
        }

        .stats-section {
            display: flex;
            gap: 20px;
            margin-bottom: 40px;
            flex-wrap: wrap;
        }

        .stat-card {
            flex: 1;
            min-width: 200px;
            background-color: var(--card-bg);
            padding: 20px;
            border-radius: var(--border-radius);
            text-align: center;
            transition: var(--transition);
            border: 1px solid var(--card-border);
            box-shadow: var(--shadow);
        }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card h3 {
            font-size: 30px;
            color: var(--text-color);
            margin: 0;
        }

        .stat-card p {
            font-size: 14px;
            color: var(--secondary-text);
            margin: 8px 0 0;
        }

        .popular-item {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .popular-item-name {
            font-size: 30px;
            font-weight: bold;
            color: var(--text-color);
            margin-bottom: 5px;
            text-align: center;
        }

        .popular-item-desc {
            font-size: 14px;
            color: var(--secondary-text);
            text-align: center;
        }

        .orders-section {
            background-color: var(--card-bg);
            padding: 25px;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            margin-bottom: 18px;
        }

        .table-header {
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }

        .table-title {
            font-size: 22px;
            color: var(--text-color);
            margin: 0;
            font-weight: 600;
        }

        .orders-table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .orders-table tr {
            margin-bottom: 8px;
            display: table-row;
        }

        .orders-table tr:nth-child(odd) {
            background-color: #f7f7f7;
        }

        .dark-theme .orders-table tr:nth-child(odd) {
            background-color: #3a444e;
        }

        .orders-table th,
        .orders-table td {
            padding: 15px;
            text-align: center;
            border-bottom: 1px solid var(--table-border);
            border-right: 1px solid var(--table-border);
        }

        .orders-table th:last-child,
        .orders-table td:last-child {
            border-right: none;
        }

        .orders-table th {
            background-color: var(--table-header-bg);
            color: var(--text-color);
            font-weight: 600;
            text-transform: uppercase;
            font-size: 13px;
        }

        .orders-table td {
            color: var(--text-color);
        }

        .orders-table tr:hover {
            background-color: rgba(59, 130, 246, 0.1);
        }

        .status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 13px;
            color: var(--sidebar-text);
            font-weight: 600;
            text-align: center;
            display: inline-block;
        }

        .status-pending {
            background-color: var(--status-pending);
        }

        .status-preparing {
            background-color: var(--status-hazirlanıyor);
        }

        .status-on_the_way {
            background-color: var(--status-on-the-way);
        }

        .status-delivered {
            background-color: var(--status-hazir);
        }

        .status-cancelled {
            background-color: var(--status-iptal);
        }

        .status-bilinmeyen {
            background-color: var(--status-bilinmeyen);
        }

        .btn-update {
            background-color: var(--button-bg);
            color: var(--sidebar-text);
            border: none;
            padding: 8px 16px;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: var(--transition);
            font-size: 14px;
            font-weight: 500;
            margin-right: 5px;
        }

        .btn-update:hover {
            background-color: var(--button-hover);
            transform: translateY(-2px);
        }

        .status-btn {
            background-color: var(--button-bg);
            border: none;
            padding: 16px 12px;
            border-radius: 20px;
            font-size: 13px;
            color: var(--sidebar-text);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            text-align: center;
            width: 100%;
            box-sizing: border-box;
            margin-bottom: 15px;
        }

        .status-btn.pending {
            background-color: var(--status-pending);
        }

        .status-btn.preparing {
            background-color: var(--status-hazirlanıyor);
        }

        .status-btn.on_the_way {
            background-color: var(--status-on-the-way);
        }

        .status-btn.delivered {
            background-color: var(--status-hazir);
        }

        .status-btn.cancelled {
            background-color: var(--status-iptal);
        }

        .status-btn:hover {
            opacity: 0.9;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: var(--modal-bg);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: var(--card-bg);
            margin: auto;
            padding: 30px;
            border: 1px solid var(--card-border);
            border-radius: var(--border-radius);
            width: 80%;
            max-width: 500px;
            box-shadow: var(--shadow);
            position: relative;
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-content h3 {
            color: var(--text-color);
            margin-top: 0;
            margin-bottom: 20px;
            font-size: 24px;
            text-align: center;
        }

        .modal-content p {
            color: var(--text-color);
            font-size: 16px;
            margin: 0 0 20px;
        }

        .modal-close-btn {
            color: var(--secondary-text);
            position: absolute;
            top: 15px;
            right: 20px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: var(--transition);
        }

        .modal-close-btn:hover {
            color: var(--text-color);
        }

        .status-options {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 300px;
            z-index: 1000;
        }

        .notification {
            background-color: var(--card-bg);
            border: 1px solid var(--card-border);
            padding: 10px 15px;
            margin-bottom: 10px;
            border-radius: var(--border-radius);
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow);
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }

            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        @media (max-width: 1024px) {
            .sidebar {
                width: 220px;
            }

            .main-content {
                margin-left: 220px;
                padding: 30px;
                width: calc(100% - 220px);
            }

            .page-header h1 {
                font-size: 24px;
            }

            .table-title {
                font-size: 20px;
            }

            .stats-section {
                gap: 15px;
            }

            .stat-card {
                min-width: 180px;
            }

            .header-controls {
                gap: 15px;
            }

            .slider-container {
                margin-top: -18px;
                margin-right: -5px;
            }
        }

        @media (max-width: 768px) {
            .hamburger-btn {
                display: block;
            }

            .sidebar {
                transform: translateX(-100%);
                width: 280px;
                max-width: 80vw;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .sidebar-close-btn {
                display: block;
            }

            .sidebar h2 {
                margin: 50px 20px 20px 20px;
                font-size: 20px;
            }

            .sidebar a {
                padding: 12px 25px;
                font-size: 15px;
            }

            .main-content {
                margin-left: 0;
                padding: 80px 20px 20px 20px;
                width: 100%;
            }

            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }

            .page-header h1 {
                font-size: 22px;
            }

            .header-controls {
                width: 100%;
                justify-content: space-between;
                flex-wrap: wrap;
            }

            .slider-container {
                margin-top: 0;
                margin-right: 0;
                order: 1;
            }

            .theme-toggle {
                order: 2;
            }

            .sound-toggle {
                order: 3;
            }

            .stats-section {
                flex-direction: column;
                gap: 10px;
            }

            .stat-card {
                min-width: 100%;
            }

            .orders-table {
                display: block;
                overflow-x: auto;
                white-space: nowrap;
            }

            .orders-table thead {
                display: none;
            }

            .orders-table tr {
                display: block;
                margin-bottom: 15px;
                border: 1px solid var(--table-border);
                border-radius: var(--border-radius);
                padding: 10px;
            }

            .orders-table td {
                display: flex;
                justify-content: space-between;
                border-bottom: none;
                padding: 8px 10px;
            }

            .orders-table td::before {
                content: attr(data-property);
                font-weight: 600;
                color: var(--secondary-text);
                margin-right: 10px;
                flex: 0 0 40%;
            }

            .modal-content {
                width: 90%;
                padding: 20px;
            }

            .status-options {
                gap: 8px;
            }

            .status-btn {
                padding: 12px;
                font-size: 12px;
            }

            .notification-container {
                width: calc(100% - 40px);
                left: 20px;
                right: 20px;
            }
        }

        @media (max-width: 480px) {
            .hamburger-btn {
                width: 40px;
                height: 40px;
                font-size: 16px;
                top: 15px;
                left: 15px;
            }

            .sidebar {
                width: 260px;
                max-width: 85vw;
            }

            .sidebar h2 {
                font-size: 18px;
                margin: 45px 15px 15px 15px;
            }

            .sidebar a {
                padding: 10px 20px;
                font-size: 14px;
            }

            .main-content {
                padding: 70px 15px 15px 15px;
            }

            .page-header h1 {
                font-size: 20px;
            }

            .table-title {
                font-size: 18px;
            }

            .stat-card h3 {
                font-size: 24px;
            }

            .stat-card p {
                font-size: 12px;
            }

            .btn-update {
                padding: 6px 12px;
                font-size: 12px;
            }

            .notification-container {
                top: 15px;
                left: 15px;
                right: 15px;
                width: calc(100% - 30px);
            }

            .notification {
                padding: 8px 12px;
                font-size: 13px;
            }

            .modal-content h3 {
                font-size: 20px;
            }

            .modal-content {
                padding: 15px;
            }

            .slider-container {
                gap: 6px;
            }

            .slider-label,
            .slider-label-close,
            .slider-label-open {
                font-size: 12px;
            }

            .switch {
                width: 50px;
                height: 26px;
            }

            .slider:before {
                height: 22px;
                width: 22px;
                left: 2px;
                bottom: 2px;
            }

            input:checked+.slider:before {
                transform: translateX(26px);
            }

            .sound-toggle,
            .theme-toggle {
                padding: 8px 16px;
                height: 30px;
                line-height: 1;
            }
        }
    </style>
</head>



<body>

    <button class="hamburger-btn" onclick="toggleSidebar()">
        <i class="fas fa-bars"></i>
    </button>
    <div class="sidebar-overlay" onclick="toggleSidebar()"></div>

    <div class="sidebar" id="sidebar">
        <button class="sidebar-close-btn" onclick="toggleSidebar()">×</button>
        <h2>
            <%= restaurant?.name || "Restoran Adı" %>
        </h2>
        <a href="/restaurant/dashboard" class="menu-item active-link">
            <i class="fas fa-home"></i> Ana Sayfa
        </a>
        <a href="/restaurant/rest_orders" class="menu-item">
            <i class="fas fa-clipboard-list"></i> Tüm Siparişler
        </a>
        <a href="/restaurant/rest_menu" class="menu-item">
            <i class="fas fa-edit"></i> Menü Yönetimi
        </a>
        <a href="/restaurant/rest_comments" class="menu-item">
            <i class="fas fa-star"></i> Müşteri Yorumları
        </a>
        <a href="/restaurant/rest_reports" class="menu-item">
            <i class="fas fa-chart-bar"></i> Satış Raporları
        </a>
        <a href="/restaurant/rest_info" class="menu-item">
            <i class="fas fa-info-circle"></i> Restoran Bilgileri
        </a>
        <a href="/restaurant/rest_settings" class="menu-item">
            <i class="fas fa-cog"></i> Ayarlar
        </a>
        <a href="#" onclick="logout(); return false;" class="menu-item">
            <i class="fas fa-sign-out-alt"></i> Çıkış Yap
        </a>
    </div>

    <div class="main-content">
        <div class="page-header">
            <div>
                <h1 class="page-title">Restoran Bilgileri</h1>
                <p class="page-subtitle">Restoranınızın bilgilerini görüntüleyin</p>
            </div>
            <div class="header-controls">
                <button class="sound-toggle" onclick="toggleSound()">
                    <i class="fas fa-bell" id="sound-icon"></i>
                </button>
                <div class="slider-container">
                    <span class="slider-label">Restoran</span>
                    <div class="slider-wrapper">
                        <span class="slider-label-close">Kapat</span>
                        <label class="switch">
                            <input type="checkbox" <%=restaurant?.delivery?.case==='open' ? 'checked' : '' %>
                            onclick="toggleRestaurantStatus()">
                            <span class="slider"></span>
                        </label>
                        <span class="slider-label-open">Aç</span>
                    </div>
                </div>
                <button class="theme-toggle">
                    <i class="fas fa-sun sun active"></i>
                    <i class="fas fa-moon moon"></i>
                </button>
            </div>
        </div>

        <div class="stats-section">
            <div class="stat-card">
                <h3 class="stats-number">
                    <%= stats?.todayDeliveredOrders || 0 %>
                </h3>
                <p class="stats-label">Bugünkü Teslim Edilen Sipariş</p>
            </div>
            <div class="stat-card">
                <h3 class="stats-number">
                    <%= stats?.dailyRevenue?.toFixed(2) || '0.00' %> TL
                </h3>
                <p class="stats-label">Bugünkü Ciro</p>
            </div>
            <div class="stat-card">
                <div class="popular">
                    <div class="popular-item-name">
                        <%= popularMeal?.name || 'Veri Yok' %>
                    </div>
                    <div class="popular-item-desc">Bugün En Çok Sipariş Edilen</div>
                </div>
            </div>
        </div>

        <div class="orders-section">
            <div class="table-header">
                <h2 class="table-title">Aktif Siparişler</h2>
                <span
                    style="background-color: rgba(var(--status-hazir-rgb, 34, 197, 94), 0.15); color: var(--status-hazir); font-size: 14px; display: flex; align-items: center; gap: 5px; padding: 6px 12px; border-radius: var(--border-radius);">
                    Siparişler otomatik yenilenmektedir
                    <i class="fas fa-check-circle"></i>
                </span>
            </div>
            <div class="table-container">
                <table class="orders-table">
                    <thead>
                        <tr>
                            <th>Tarih</th>
                            <th>Müşteri</th>
                            <th>Adres</th>
                            <th>Ürünler</th>
                            <th>Tutar</th>
                            <th>Ödeme</th>
                            <th>Not</th>
                            <th>Durum</th>
                            <th>İşlemler</th>
                            <th>Yazdır</th>

                        </tr>
                    </thead>
<tbody>
    <% if (Array.isArray(recentOrders) && recentOrders.length > 0) { %>
        <% recentOrders.forEach(function(order) { %>
            <% if (['pending', 'preparing', 'on_the_way'].includes(order.status)) { %>
                <tr>
                    <td data-property="Sipariş Tarihi">
                        <% const date = new Date(order.createdAt); %>
                        <% const formattedDate = date.toLocaleString('tr-TR', {
                            day: '2-digit',
                            month: 'long',
                            year: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        }); %>
                        <%= formattedDate %>
                    </td>

                    <td data-property="Müşteri">
                        <% if (order.userId) { %>
                            <%= order.userId.firstName || '' %> <%= order.userId.lastName || '' %>
                            <% if (order.userId.phone) { %>
                                <br>
                                <small style="color: var(--primary-text); font-weight: bold;">
                                    <%= order.userId.phone %>
                                </small>
                            <% } %>
                        <% } else { %>
                            Bilinmeyen Kullanıcı
                        <% } %>
                    </td>

                    <td data-property="Adres">
                        <%= order.deliveryAddressDetails?.address || 'Adres Yok' %>
                    </td>

                    <td data-property="Ürünler">
                        <% if (Array.isArray(order.items)) { %>
                            <%= order.items.map(function(item) {
                                const itemName = item.name || (item.mealId && item.mealId.name) || 'Bilinmeyen Ürün';
                                const qty = item.quantity || 1;
                                return `${itemName} (${qty}x)`;
                            }).join(', ') %>
                        <% } else { %>
                            Veri Yok
                        <% } %>
                    </td>

                    <td data-property="Tutar">
                        <%= order.totalPrice ? order.totalPrice.toFixed(2) : '0.00' %> TL
                    </td>

                    <td data-property="Ödeme">
                        <% const paymentMethods = {
                            'credit_card': 'Kredi Kartı',
                            'cash': 'Nakit',
                            'online_payment': 'Online Ödeme',
                            'wallet': 'Cüzdan'
                        }; %>
                        <%= paymentMethods[order.paymentMethod] || 'Bilinmeyen' %>
                    </td>

                    <td data-property="Not">
                        <%= order.note || 'Not bulunmamaktadır.' %>
                    </td>

                    <td data-property="Durum">
                        <span class="status status-<%= order.status || 'bilinmeyen' %>">
                            <%= order.status === 'pending' ? 'Beklemede'
                                : order.status === 'preparing' ? 'Hazırlanıyor'
                                : order.status === 'on_the_way' ? 'Yolda'
                                : 'Bilinmeyen' %>
                        </span>
                    </td>

                    <td data-property="İşlemler">
                        <button type="button" class="btn-update" onclick="openModal('<%= order._id %>')">
                            Güncelle
                        </button>
                    </td>

                    <td data-property="Yazdır">
                        <button type="button" class="btn-print" onclick="printOrder(this)">
                            <i class="fas fa-print"></i> Yazdır
                        </button>
                    </td>
                </tr>
            <% } %>
        <% }); %>
    <% } else { %>
        <tr>
            <td colspan="10" class="empty-state">Aktif sipariş bulunmamaktadır.</td>
        </tr>
    <% } %>
</tbody>

                </table>
            </div>
        </div>
    </div>

    <div class="modal" id="modal">
        <div class="modal-content">
            <span class="modal-close-btn" onclick="closeModal()">×</span>
            <h3>Durumu Güncelle</h3>
            <div class="status-options">
                <form id="status-form" action="" method="POST">
                    <button type="submit" class="status-btn delivered" name="status" value="delivered">Teslim</button>
                    <button type="submit" class="status-btn on_the_way" name="status" value="on_the_way">Yolda</button>
                    <button type="submit" class="status-btn preparing" name="status"
                        value="preparing">Hazırlanıyor</button>
                    <button type="submit" class="status-btn cancelled" name="status" value="cancelled">İptal</button>
                </form>
            </div>
        </div>
    </div>

    <div class="notification-container"></div>

    <audio id="notification-sound" preload="auto" crossorigin="anonymous">
        <source src="/uploads/notification.wav" type="audio/wav">
        <source src="/uploads/notification.mp3" type="audio/mpeg">
        <source src="https://www.soundjay.com/buttons/beep-01a.mp3" type="audio/mpeg">
        Ses oynatma desteklenmiyor.
    </audio>


    <script src="/socket.io/socket.io.js"></script>


    <script>
        // Socket.IO Bağlantısı
        const socket = io();
        const restaurantId = '<%= restaurantId %>';
        console.log('Restaurant ID:', restaurantId);

        if (!restaurantId) {
            console.error('Hata: restaurantId tanımlı değil!');
        }

        socket.emit('joinRestaurant', restaurantId);
        console.log('joinRestaurant olayı gönderildi:', restaurantId);

        socket.on('connect', () => {
            console.log('Socket.IO bağlantısı başarılı, socket ID:', socket.id);
        });

        socket.on('connect_error', (error) => {
            console.error('Socket.IO bağlantı hatası:', error);
        });

        // Cookie Yönetimi
        function setCookie(name, value, days) {
            const expires = new Date();
            expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
            document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;SameSite=Strict`;
            console.log(`Cookie set: ${name}=${value}`);
        }

        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i].trim();
                if (c.indexOf(nameEQ) === 0) {
                    const value = c.substring(nameEQ.length, c.length);
                    console.log(`Cookie found: ${name}=${value}`);
                    return value;
                }
            }
            console.log(`Cookie not found: ${name}`);
            return null;
        }

        // Gelişmiş Ses Yönetim Sistemi
        class SoundManager {
            constructor() {
                this.isSoundEnabled = getCookie('soundEnabled') === 'true';
                this.hasInteracted = false;
                this.audioContext = null;
                this.audioBuffer = null;
                this.audioElement = null;
                this.rawAudioData = null;
                this.interactionEvents = ['click', 'touchstart', 'keydown', 'mousedown', 'touchend', 'pointerdown'];
                this.isPreloaded = false;

                this.init();
            }

            init() {
                // Ses elementini hazırla
                this.audioElement = document.getElementById('notification-sound');

                // Çoklu etkileşim eventi dinle
                this.interactionEvents.forEach(event => {
                    document.addEventListener(event, this.handleUserInteraction.bind(this), {
                        once: false,
                        passive: true,
                        capture: true
                    });
                });

                // Sayfa görünürlük değişikliklerini dinle
                document.addEventListener('visibilitychange', this.handleVisibilityChange.bind(this));

                // Window focus eventi
                window.addEventListener('focus', this.handleWindowFocus.bind(this));

                // Ses ikonunu güncelle
                this.updateSoundIcon();

                // Audio context'i hazırla
                this.prepareAudioContext();

                // İlk etkileşim kontrolü
                setTimeout(() => {
                    if (!this.hasInteracted) {
                        console.log('Kullanıcı etkileşimi bekleniyor...');
                    }
                }, 1000);
            }

            handleUserInteraction(event) {
                if (!this.hasInteracted) {
                    this.hasInteracted = true;
                    console.log('Kullanıcı etkileşimi algılandı:', event.type);

                    // Audio context'i başlat
                    this.initAudioContext();

                    // Audio elementini hazırla
                    this.preloadAudio();
                }

                // Her etkileşimde ses hazırlığını kontrol et
                if (this.hasInteracted && !this.isPreloaded) {
                    this.preloadAudio();
                }
            }

            handleVisibilityChange() {
                if (!document.hidden && this.hasInteracted) {
                    console.log('Sekme aktif oldu, ses hazırlığı yenileniyor');
                    setTimeout(() => {
                        this.preloadAudio();
                    }, 100);
                }
            }

            handleWindowFocus() {
                if (this.hasInteracted) {
                    console.log('Window focus - ses hazırlığı yenileniyor');
                    setTimeout(() => {
                        this.preloadAudio();
                    }, 100);
                }
            }

            async initAudioContext() {
                try {
                    if (!this.audioContext) {
                        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                    }

                    if (this.audioContext.state === 'suspended') {
                        await this.audioContext.resume();
                        console.log('Audio context resumed');
                    }

                    console.log('Audio context durumu:', this.audioContext.state);
                } catch (error) {
                    console.warn('Audio context başlatılamadı:', error);
                }
            }

            async preloadAudio() {
                if (this.isPreloaded) return;

                try {
                    if (this.audioElement) {
                        // Audio element hazırlığı
                        this.audioElement.load();
                        this.audioElement.volume = 0.01;

                        const playPromise = this.audioElement.play();

                        if (playPromise !== undefined) {
                            await playPromise;
                            this.audioElement.pause();
                            this.audioElement.currentTime = 0;
                            this.audioElement.volume = 1;
                            this.isPreloaded = true;
                            console.log('Audio element hazırlandı');
                        }
                    }

                    // Web Audio API ile buffer hazırlığı
                    if (this.rawAudioData && this.audioContext) {
                        try {
                            this.audioBuffer = await this.audioContext.decodeAudioData(this.rawAudioData.slice(0));
                            console.log('Audio buffer hazırlandı');
                        } catch (error) {
                            console.warn('Audio buffer decode hatası:', error);
                        }
                    }

                } catch (error) {
                    console.warn('Ses ön yükleme hatası:', error);
                    // Hata durumunda tekrar deneme
                    setTimeout(() => {
                        this.isPreloaded = false;
                    }, 2000);
                }
            }

            prepareAudioContext() {
                // Ses dosyasını önceden fetch et
                fetch('/uploads/notification.wav')
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Ses dosyası bulunamadı');
                        }
                        return response.arrayBuffer();
                    })
                    .then(data => {
                        this.rawAudioData = data;
                        console.log('Ses verisi hazırlandı');
                    })
                    .catch(error => {
                        console.warn('Ses verisi yüklenemedi:', error);
                        // Alternatif ses dosyası dene
                        return fetch('/uploads/notification.mp3');
                    })
                    .then(response => {
                        if (response) {
                            return response.arrayBuffer();
                        }
                    })
                    .then(data => {
                        if (data && !this.rawAudioData) {
                            this.rawAudioData = data;
                            console.log('Alternatif ses verisi hazırlandı');
                        }
                    })
                    .catch(error => {
                        console.warn('Hiçbir ses dosyası yüklenemedi:', error);
                    });
            }

            async playNotificationSound() {
                if (!this.isSoundEnabled) {
                    console.log('Bildirim sesi kapalı');
                    return false;
                }

                console.log('Ses çalma girişimi başlatıldı');
                console.log('hasInteracted:', this.hasInteracted);
                console.log('isPreloaded:', this.isPreloaded);

                if (!this.hasInteracted) {
                    console.warn('Kullanıcı etkileşimi yok');
                    this.showFallbackNotification();
                    return false;
                }

                // Çoklu yöntem deneme
                const methods = [
                    { name: 'AudioElement', method: () => this.playWithAudioElement() },
                    { name: 'AudioContext', method: () => this.playWithAudioContext() },
                    { name: 'NewAudio', method: () => this.playWithNewAudio() }
                ];

                for (const methodObj of methods) {
                    try {
                        console.log(`${methodObj.name} ile ses çalma deneniyor...`);
                        const result = await methodObj.method();
                        if (result) {
                            console.log(`${methodObj.name} ile ses başarıyla çalındı`);
                            return true;
                        }
                    } catch (error) {
                        console.warn(`${methodObj.name} başarısız:`, error.message);
                    }
                }

                console.error('Hiçbir ses çalma metodu çalışmadı');
                this.showFallbackNotification();
                return false;
            }

            async playWithAudioElement() {
                if (!this.audioElement) {
                    console.log('Audio element bulunamadı');
                    return false;
                }

                try {
                    this.audioElement.currentTime = 0;
                    this.audioElement.volume = 1;

                    const playPromise = this.audioElement.play();

                    if (playPromise !== undefined) {
                        await playPromise;
                        console.log('Audio element ile çalındı');
                        return true;
                    }
                    return false;
                } catch (error) {
                    console.warn('Audio element hatası:', error);
                    return false;
                }
            }

            async playWithAudioContext() {
                if (!this.audioContext || !this.audioBuffer) {
                    console.log('AudioContext veya buffer hazır değil');
                    return false;
                }

                try {
                    if (this.audioContext.state === 'suspended') {
                        await this.audioContext.resume();
                    }

                    const source = this.audioContext.createBufferSource();
                    const gainNode = this.audioContext.createGain();

                    source.buffer = this.audioBuffer;
                    source.connect(gainNode);
                    gainNode.connect(this.audioContext.destination);
                    gainNode.gain.value = 1;

                    source.start(0);
                    console.log('AudioContext ile çalındı');
                    return true;

                } catch (error) {
                    console.warn('AudioContext hatası:', error);
                    return false;
                }
            }

            async playWithNewAudio() {
                try {
                    const audio = new Audio('/uploads/notification.wav');
                    audio.volume = 1;
                    audio.preload = 'auto';

                    await audio.play();
                    console.log('New Audio ile çalındı');
                    return true;
                } catch (error) {
                    console.warn('New Audio hatası:', error);
                    return false;
                }
            }

            showFallbackNotification() {
                console.log('Fallback bildirim gösteriliyor');

                // Görsel bildirim
                if (window.showNotification) {
                    showNotification('🔔 Yeni sipariş! (Ses çalınamadı)', 'success');
                }

                // Tarayıcı bildirimi
                if ('Notification' in window && Notification.permission === 'granted') {
                    new Notification('Yeni Sipariş!', {
                        body: 'Restoran panenizde yeni bir sipariş var.',
                        icon: '/favicon.ico',
                        requireInteraction: true
                    });
                }

                // Sayfa titreşimi (mobile)
                if ('vibrate' in navigator) {
                    navigator.vibrate([200, 100, 200]);
                }

                // Görsel flash efekti
                this.createVisualFlash();
            }

            createVisualFlash() {
                const flash = document.createElement('div');
                flash.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 0, 0, 0.3);
            z-index: 9999;
            pointer-events: none;
            animation: flash 0.5s ease-in-out;
        `;

                // CSS animation ekle
                if (!document.getElementById('flash-style')) {
                    const style = document.createElement('style');
                    style.id = 'flash-style';
                    style.textContent = `
                @keyframes flash {
                    0%, 100% { opacity: 0; }
                    50% { opacity: 1; }
                }
            `;
                    document.head.appendChild(style);
                }

                document.body.appendChild(flash);

                setTimeout(() => {
                    if (flash.parentNode) {
                        flash.parentNode.removeChild(flash);
                    }
                }, 500);
            }

            toggleSound() {
                this.isSoundEnabled = !this.isSoundEnabled;
                setCookie('soundEnabled', this.isSoundEnabled, 30);
                this.updateSoundIcon();

                if (window.showNotification) {
                    showNotification(`Bildirim sesi ${this.isSoundEnabled ? 'açıldı' : 'kapatıldı'}.`, 'success');
                }

                console.log('Ses durumu değiştirildi:', this.isSoundEnabled);

                // Test sesi çal
                if (this.isSoundEnabled && this.hasInteracted) {
                    setTimeout(() => {
                        this.playNotificationSound();
                    }, 500);
                }
            }

            updateSoundIcon() {
                const soundIcon = document.getElementById('sound-icon');
                if (soundIcon) {
                    soundIcon.className = `fas fa-bell${this.isSoundEnabled ? '' : '-slash'}`;
                }
            }

            async requestNotificationPermission() {
                if ('Notification' in window && Notification.permission === 'default') {
                    const permission = await Notification.requestPermission();
                    console.log('Bildirim izni:', permission);
                    return permission === 'granted';
                }
                return Notification.permission === 'granted';
            }
        }

        // Global değişkenler
        let soundManager;

        // Socket Event Handlers
        socket.on('newOrder', (order) => {
            console.log('Yeni sipariş alındı:', order);
            if (order.status === 'pending') {
                // Başlığı değiştir
                document.title = "🔔 Sipariş Geldi!!";

                // Ses çal
                if (soundManager) {
                    soundManager.playNotificationSound();
                }

                // Bildirim göster
                showNotification('Yeni sipariş alındı!', 'success');

                // Sekmeye odaklanıldığında başlığı geri yükle
                const handleFocus = () => {
                    document.title = "<%= restaurant?.name || 'Restoran Adı' %> - Dashboard";
                    window.location.reload();
                    window.removeEventListener('focus', handleFocus);
                };
                window.addEventListener('focus', handleFocus);
            } else {
                console.log('Sipariş durumu pending değil:', order.status);
                window.location.reload();
            }
        });

        socket.on('orderStatusUpdated', (order) => {
            console.log('Sipariş durumu güncellendi:', order);
            window.location.reload();
        });

        // UI Functions
        function toggleSidebar() {
            const sidebar = document.getElementById('sidebar');
            const overlay = document.querySelector('.sidebar-overlay');
            sidebar.classList.toggle('open');
            overlay.classList.toggle('active');
        }

        function showNotification(message, type = 'success') {
            const container = document.querySelector('.notification-container');
            if (!container) return;

            const notification = document.createElement('div');
            notification.className = `notification ${type}`;
            notification.innerHTML = `<span>${message}</span><button class="close-btn"><i class="fas fa-times"></i></button>`;

            container.appendChild(notification);

            const closeBtn = notification.querySelector('.close-btn');
            if (closeBtn) {
                closeBtn.onclick = () => {
                    notification.style.display = 'none';
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                };
            }

            setTimeout(() => {
                if (notification.parentNode) {
                    notification.style.display = 'none';
                    notification.parentNode.removeChild(notification);
                }
            }, 5000);
        }

        function openModal(orderId) {
            const modal = document.getElementById('modal');
            const form = document.getElementById('status-form');
            if (modal && form) {
                form.action = `/restaurant/update-order-status/${orderId}?redirect=dashboard`;
                modal.style.display = 'flex';
            }
        }

        function closeModal() {
            const modal = document.getElementById('modal');
            if (modal) {
                modal.style.display = 'none';
            }
        }

        function toggleSound() {
            if (soundManager) {
                soundManager.toggleSound();
            }
        }

        // Restaurant Status Toggle
        async function toggleRestaurantStatus() {
            try {
                const slider = document.querySelector('.switch input');
                if (!slider) return;

                const newStatus = slider.checked ? 'open' : 'closed';

                const response = await fetch('/restaurant/toggle-status', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: newStatus }),
                    credentials: 'include'
                });

                if (response.ok) {
                    showNotification(`Restoran ${newStatus === 'open' ? 'açıldı' : 'kapatıldı'}.`, 'success');
                } else {
                    const errorData = await response.json();
                    if (errorData?.message === 'Aktif siparişler varken restoran kapatılamaz') {
                        showNotification('Aktif siparişler varken restoran kapatılamaz.', 'error');
                    } else {
                        showNotification('Restoran durumu değiştirilemedi.', 'error');
                    }
                    slider.checked = !slider.checked;
                }
            } catch (error) {
                console.error('Bağlantı hatası:', error);
                showNotification('Restoran durumu değiştirilemedi.', 'error');
                const slider = document.querySelector('.switch input');
                if (slider) {
                    slider.checked = !slider.checked;
                }
            }
        }

        // Logout Function
        async function logout() {
            try {
                const response = await fetch('/restaurant/logout', {
                    method: 'POST',
                    credentials: 'include'
                });

                if (response.redirected || response.status === 301 || response.status === 302) {
                    console.log('Redirecting to:', response.url);
                    showNotification('Oturum doğrulaması başarısız. Lütfen tekrar giriş yap.');
                    window.location.href = '/account/login';
                    return;
                }

                const data = await response.json();
                if (data.success) {
                    showNotification(data.message || 'Başarıyla çıkış yapıldı.');
                    window.location.href = '/';
                } else {
                    showNotification(data.message || 'Çıkış yapılamadı.', 'error');
                    console.error('Logout failed:', data.message);
                }
            } catch (error) {
                console.error('Logout error:', error);
                showNotification('Çıkış yapılırken hata oluştu.', 'error');
            }
        }

        // Event Listeners
        window.onclick = function (event) {
            const modal = document.getElementById('modal');
            const sidebar = document.getElementById('sidebar');
            const toggle = document.querySelector('.hamburger-btn');

            if (event.target === modal) {
                closeModal();
            }

            if (sidebar && toggle && !sidebar.contains(event.target) && !toggle.contains(event.target) && sidebar.classList.contains('open')) {
                toggleSidebar();
            }
        };

        // DOM Content Loaded
        document.addEventListener('DOMContentLoaded', function () {
            console.log('DOM Content Loaded');

            // Ses yöneticisini başlat
            soundManager = new SoundManager();

            // Bildirim iznini iste
            soundManager.requestNotificationPermission();

            // Sayfa başlığını ayarla
            document.title = "<%= restaurant?.name || 'Restoran Adı' %> - Dashboard";

            // Tema kontrolü
            const themeToggle = document.querySelector('.theme-toggle');
            const sunIcon = document.querySelector('.sun');
            const moonIcon = document.querySelector('.moon');

            if (themeToggle && sunIcon && moonIcon) {
                themeToggle.addEventListener('click', function () {
                    document.body.classList.toggle('dark-theme');
                    sunIcon.classList.toggle('active');
                    moonIcon.classList.toggle('active');
                    localStorage.setItem('theme', document.body.classList.contains('dark-theme') ? 'dark' : 'light');
                });

                // Kaydedilmiş tema ayarını yükle
                if (localStorage.getItem('theme') === 'dark') {
                    document.body.classList.add('dark-theme');
                    sunIcon.classList.remove('active');
                    moonIcon.classList.add('active');
                }
            }

            console.log('Tüm event listener\'lar kuruldu');
        });

        // Page Visibility API - Sekme değişimlerini takip et
        document.addEventListener('visibilitychange', function () {
            if (!document.hidden) {
                console.log('Sayfa tekrar görünür oldu');
                // Eğer başlık değişmişse, geri yükle
                if (document.title.includes('🔔')) {
                    document.title = "<%= restaurant?.name || 'Restoran Adı' %> - Dashboard";
                }
            }
        });

        // Service Worker kaydı (opsiyonel - gelecekte push notification için)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', function () {
                navigator.serviceWorker.register('/sw.js')
                    .then(function (registration) {
                        console.log('ServiceWorker kayıt başarılı:', registration.scope);
                    })
                    .catch(function (error) {
                        console.log('ServiceWorker kayıt hatası:', error);
                    });
            });
        }

        console.log('Restaurant Dashboard Script yüklendi');







    </script>

<script>
    function printOrder(button) {
    const row = button.closest('tr');
    const cells = row.querySelectorAll('td');

    const date = cells[0].textContent.trim();

    const customerCell = cells[1];
    const customerName = customerCell.childNodes[0]?.textContent.trim() || '';
    const phoneElement = customerCell.querySelector('small');
    const phone = phoneElement ? phoneElement.textContent.trim() : '';

    const address = cells[2].textContent.trim();
    const productsText = cells[3].textContent.trim();
    const products = productsText.split(', ').map(item => {
        const parts = item.split(' (');
        const name = parts[0];
        const quantity = parts[1] ? parts[1].replace('x)', '') : '1';
        return { name, quantity };
    });

    const amount = cells[4].textContent.trim();
    const payment = cells[5].textContent.trim();
    const note = cells[6].textContent.trim();
    const status = cells[7].querySelector('.status')?.textContent.trim() || '';

    let productsHtml = '';
    products.forEach(product => {
        productsHtml += `<p>${product.name} (x${product.quantity})</p>`;
    });

    const printHtml = `
<!DOCTYPE html>
<html>
<head>
    <title>Fiş</title>
    <style>
        body {
            font-family: monospace;
            font-size: 14px;
            padding: 20px;
            background: white;
            color: black;
        }
        .receipt {
            max-width: 300px;
            margin: auto;
            padding: 10px;
            border: 1px dashed black;
        }
        .centered {
            text-align: center;
            font-weight: bold;
            margin-bottom: 10px;
        }
        hr {
            border: none;
            border-top: 1px dashed black;
            margin: 10px 0;
        }
        .total {
            text-align: right;
            font-size: 16px;
            font-weight: bold;
        }
        .small {
            font-size: 12px;
            color: #444;
        }

        @media print {
            body * {
                visibility: hidden;
            }
            .receipt, .receipt * {
                visibility: visible;
            }
            .receipt {
                position: absolute;
                left: 0;
                top: 0;
            }
        }
    </style>
</head>
<body>
    <div class="receipt">
        <h2 class="centered">eduyemek</h2>
        <p class="centered">Paket Servis</p>
        <p><strong>Tarih:</strong> ${date}</p>
        <p><strong>Müşteri:</strong> ${customerName}</p>
        <p><strong>Tel:</strong> ${phone}</p>
        <hr>
        <p><strong>Adres:</strong><br>${address}</p>
        <hr>
        <p><strong>Not:</strong><br>${note || '-'}</p>
        <p><strong>Ödeme Şekli:</strong><br>${payment}</p>
        <hr>
        <p><strong>Ürünler:</strong></p>
        ${productsHtml}
        <hr>
        <p class="total">Toplam: ${amount}</p>
        <h3 class="centered">TEŞEKKÜR EDERİZ</h3>
    </div>
    <script>
        window.onload = function() {
            window.print();
        }
    <\/script>
</body>
</html>
`;

    const win = window.open('', '', 'width=400,height=600');
    win.document.write(printHtml);
    win.document.close();
}

</script>

</body>



</html>