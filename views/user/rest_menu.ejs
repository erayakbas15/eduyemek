<!DOCTYPE html>
<html lang="tr" class="h-full">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Restoran Menüsü - eduyemek</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" href="/ituyemek_logo.png" type="image/png">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />

  <style>
    :root {
      --primary-orange: #ff6000;
      --light-orange: #fff5f0;
      --dark-gray: #484848;
      --light-gray: #f8f8f8;
      --border-color: #e5e5e5;
    }

    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    * {
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', sans-serif;
      background: linear-gradient(135deg, #fafafa 0%, #f0f0f0 100%);
      margin: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    main {
      flex: 1 0 auto;
      max-width: 100%;
      width: 100%;
      padding: 1rem;
      box-sizing: border-box;
    }

    .header-container {
      background: linear-gradient(135deg, #667eea, #764ba2);
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
      position: sticky;
      top: 0;
      z-index: 100;
      padding: 0.5rem 1rem;
    }

    .glass-card {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid rgba(209, 213, 219, 0.3);
      border-radius: 12px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    }

    .header-logo {
      font-size: 1.25rem;
      font-weight: 600;
      color: #fff;
    }

    .search-input {
      background: #fff;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      transition: border-color 0.2s, box-shadow 0.2s, transform 0.2s;
    }

    .search-input:focus {
      border-color: #667eea;
      box-shadow: 0 0 8px rgba(102, 126, 234, 0.2);
      transform: scale(1.02);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #f43f5e, #fb923c);
      border-radius: 8px;
      color: #fff;
      font-weight: 600;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-secondary:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(255, 216, 155, 0.4);
    }

    .btn-secondary.active {
      background: linear-gradient(135deg, #10b981, #059669);
    }

    .btn-secondary:active {
      transform: scale(0.95);
    }

    .notification-badge {
      background: linear-gradient(135deg, #ff0000 0%, #e14a14 100%);
      animation: bounce 2s infinite;
    }

    .btn-toggle {
      background: #e5e7eb;
      color: #374151;
      border-radius: 8px;
      font-weight: 600;
      transition: background 0.2s, color 0.2s, transform 0.2s;
    }

    .btn-toggle.active {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: #fff;
    }

    .btn-toggle:hover {
      transform: translateY(-1px);
      background: #d1d5db;
    }

    .btn-toggle.active:hover {
      background: linear-gradient(135deg, #5a6dd8, #6a3b92);
    }

    @keyframes bounce {

      0%,
      100% {
        transform: translateY(0);
      }

      50% {
        transform: translateY(-3px);
      }
    }

    .search-filters-container {
      background: white;
      padding: 6px 20px;
      margin: 0 auto 20px;
      max-width: 870px;
      border-radius: 12px;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
    }

    .category-filters {
      display: flex;
      flex-wrap: nowrap;
      gap: 6px;
      justify-content: flex-start;
      overflow-x: auto;
      padding: 3px 0;
      margin: 0;
      scrollbar-width: none;
      font-size: 0.95rem;
      height: 32px;
    }

    .filter-btn {
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 8px;
      color: #fff;
      font-weight: 600;
      transition: transform 0.2s, box-shadow 0.2s;
      font-size: 14px;
      cursor: pointer;
      padding: 4px 12px;
      line-height: 1;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      box-sizing: border-box;
      width: auto;
      min-width: 0;
    }

    .filter-btn:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
    }

    .filter-btn.active {
      background: #10b981;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.2);
    }

    .restaurant-card,
    .meal-card {
      background: #fff;
      border-radius: 0.75rem;
      transition: transform 0.2s, box-shadow 0.2s;
      cursor: pointer;
      width: 100%;
      max-width: 20rem;
      height: auto;
      min-height: 12.5rem;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      margin: 0 auto;
    }

    .restaurant-card:hover,
    .meal-card:hover {
      transform: translateY(-0.25rem);
      box-shadow: 0 0.375rem 1.25rem rgba(0, 0, 0, 0.08);
    }

    .restaurant-card.closed {
      background: #f5f5f5;
      cursor: not-allowed;
      opacity: 0.7;
    }

    .restaurant-card img,
    .meal-card img {
      width: 100%;
      height: 7.5rem;
      object-fit: cover;
      border-radius: 0.75rem 0.75rem 0 0;
      flex-shrink: 0;
    }

    .spinner {
      border: 3px solid #f3f3f3;
      border-top: 3px solid var(--primary-orange);
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 40px auto;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .error-message {
      background: #fee;
      border: 1px solid #fcc;
      color: #c33;
      padding: 20px;
      border-radius: 8px;
      text-align: center;
      margin: 20px auto;
      max-width: 600px;
    }

    .empty-state {
      text-align: center;
      padding: 60px 20px;
      color: #666;
    }

    .empty-state i {
      font-size: 4rem;
      color: #ddd;
      margin-bottom: 20px;
    }

    .notification {
      position: fixed;
      top: 0.75rem;
      right: 0.75rem;
      background: #4caf50;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      transform: translateX(400px);
      transition: transform 0.2s ease-in-out;
      z-index: 1000;
      font-weight: 500;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.error {
      background: linear-gradient(135deg, #ef4444, #dc2626);
    }

    .footer {
      background: white;
      padding: 40px 20px;
      text-align: center;
      border-top: 1px solid var(--border-color);
      flex-shrink: 0;
    }

    .footer-brand {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--primary-orange);
      margin-bottom: 12px;
    }

    .footer-links {
      display: flex;
      justify-content: center;
      gap: 24px;
      margin: 20px 0;
      flex-wrap: wrap;
    }

    .footer-links a {
      color: #666;
      text-decoration: none;
      font-size: 14px;
      transition: color 0.3s ease;
    }

    .footer-links a:hover {
      color: var(--primary-orange);
    }

    .fade-in {
      opacity: 0;
      transform: translateY(20px);
      animation: fadeInUp 0.6s ease forwards;
    }

    @keyframes fadeInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    header.shrunk {
      padding: 0.5rem 1rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    header.shrunk .header-logo {
      font-size: 1.5rem;
    }

    header.shrunk .search-input {
      padding: 0.5rem 0.75rem 0.5rem 2rem;
    }

    header.hidden {
      transform: translateY(-100%);
      transition: transform 0.3s;
    }

    #hamburgerMenu {
      transform: translateX(-100%);
      transition: transform 0.3s;
    }

    #hamburgerMenu.open {
      transform: translateX(0);
    }

    #hamburgerOverlay.show {
      display: block;
    }

    body.menu-open {
      overflow: hidden;
    }

    .address-dropdown {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid rgba(209, 213, 219, 0.3);
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    /* Dark Mode */
    @media (prefers-color-scheme: dark) {

      body,
      .bg-gray-50 {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      header {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      .glass-card {
        background: rgba(30, 30, 30, 0.95) !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        color: #ffffff !important;
      }

      .restaurant-card,
      .meal-card {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border: 1px solid #404040;
      }

      .restaurant-card h3,
      .meal-card h3 {
        font-weight: 700 !important;
        font-size: 0.875rem;
        line-height: 1.25rem;

      }

      .restaurant-card p,
      .meal-card p {
        color: #cccccc !important;
      }

      .restaurant-card .text-sm,
      .meal-card .text-sm {
        color: #999999 !important;
      }

      .restaurant-card.closed {
        background: #1a1a1a !important;
        color: #666666 !important;
      }

      .search-input {
        background: #2d2d2d !important;
        border-color: #404040 !important;
        color: #ffffff !important;
      }

      .search-input::placeholder {
        color: #999999 !important;
      }

      .btn-toggle {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border: 1px solid #404040;
      }

      .btn-toggle:hover {
        background: #404040 !important;
      }

      .address-dropdown {
        background: #2d2d2d !important;
        border: 1px solid #404040 !important;
        color: #ffffff !important;
      }

      .spinner {
        border-color: #404040 !important;
        border-top-color: #667eea !important;
      }

      .header-logo {
        color: #ffffff !important;
      }

      #hamburgerMenu {
        background: #2d2d2d !important;
        color: #ffffff !important;
      }

      #hamburgerMenu nav a {
        color: #ffffff !important;
      }

      #hamburgerMenu nav a:hover {
        color: #667eea !important;
      }

      .address-btn,
      .account-btn {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border-color: #404040 !important;
      }

      .address-btn:hover,
      .account-btn:hover {
        background: #404040 !important;
      }

      #addressDropdown,
      .group-hover\:block {
        background: #2d2d2d !important;
        border-color: #404040 !important;
      }

      #addressDropdown .adres-dropdown {
        color: #cccccc !important;
      }

      #addressDropdown .text-xs {
        color: #000000 !important;
      }

      #addressDropdown .teslimat-adresi {
        color: #cccccc !important;
      }

      .category-filters h3 {
        color: #000000 !important;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: #ffffff !important;
      }

      p,
      span,
      div {
        color: #ffffff !important;
      }

      .text-gray-600 {
        color: #cccccc !important;
      }

      .text-gray-500 {
        color: #999999 !important;
      }

      .text-gray-400 {
        color: #666666 !important;
      }

      .text-gray-700 {
        color: #ffffff !important;
      }

      .text-gray-800 {
        color: #ffffff !important;
      }

      .text-gray-900 {
        color: #ffffff !important;
      }

      footer {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      nav {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      .restaurant-card *,
      .meal-card * {
        color: inherit !important;
      }

      input,
      textarea,
      select {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border-color: #404040 !important;
      }

      a {
        color: #667eea !important;
      }

      a:hover {
        color: #5a6dd8 !important;
      }

      svg {
        color: inherit !important;
      }

      #basketPanel {
        background: #262121 !important;
        color: #ffffff !important;
      }

      #basketPanel h2 {
        color: #F97316 !important;
      }

      #restaurantName {
        color: #000000 !important;
      }

      #basketPanel h3 {
        color: #ffffff !important;
      }

      #basketContainer {
        background: #2d2d2d !important;
      }

      #basketSummary {
        background: #2d2d2d !important;
        border: 1px solid #404040 !important;
      }

      .quantity-display {
        color: black !important;
      }

      #searchSuggestions {
        background: #2d2d2d !important;
        border-color: #404040 !important;
        color: #ffffff !important;
      }

      .bg-green-100 {
        background: rgba(34, 197, 94, 0.2) !important;
      }

      .bg-red-100 {
        background: rgba(239, 68, 68, 0.2) !important;
      }

      .bg-yellow-100 {
        background: rgba(251, 191, 36, 0.2) !important;
      }

      .text-green-600 {
        color: #22c55e !important;
      }

      .text-red-600 {
        color: #ef4444 !important;
      }

      .text-yellow-600 {
        color: #eab308 !important;
      }

      /* EKLENDİ: meal-card içindeki bg-white override */
      .meal-card>div.bg-white {
        background-color: #2d2d2d !important;
        color: #ffffff !important;
      }
    }


    /* Responsive Design */
    @media (max-width: 1024px) {

      .restaurant-card,
      .meal-card {
        max-width: 18rem;
        min-height: 11.5rem;
      }

      .restaurant-card img,
      .meal-card img {
        height: 7rem;
      }
    }

    @media (max-width: 768px) {
      header {
        padding: 0.5rem 1rem;
      }

      .header-logo {
        font-size: 1.25rem;
      }

      .search-input {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem 0.5rem 2rem;
      }

      .search-input+svg {
        width: 0.875rem;
        height: 0.875rem;
        left: 0.75rem;
      }

      .address-dropdown {
        width: 100%;
        max-width: 16rem;
      }

      .restaurant-card,
      .meal-card {
        max-width: 100%;
        min-height: 10rem;
      }

      .restaurant-card img,
      .meal-card img {
        height: 6rem;
      }

      .search-filters-container {
        margin: 10px;
        padding: 16px;
      }

      .category-filters {
        font-size: 0.875rem;
      }
    }

    @media (max-width: 480px) {
      .search-input {
        width: 100%;
      }

      .header-buttons {
        flex-direction: column;
        gap: 0.5rem;
      }

      .address-btn,
      .account-btn,
      .cart-btn {
        width: 100%;
        justify-content: center;
      }

      .restaurant-card,
      .meal-card {
        max-width: 100%;
        min-height: 9rem;
      }

      .restaurant-card img,
      .meal-card img {
        height: 5rem;
      }

      .notification {
        width: 90%;
        font-size: 0.75rem;
      }
    }
  </style>
</head>

<body class="bg-gray-50 font-sans min-h-screen text-gray-900 flex flex-col">
  <header class="glass-card shadow-lg sticky top-0 z-40 transform transition-all duration-300">
    <div class="max-w-7xl mx-auto px-4 py-3 flex flex-col md:flex-row justify-between items-center gap-2">
      <div class="flex items-center justify-between w-full md:w-auto">
        <button id="hamburgerBtn" class="md:hidden flex items-center p-2" aria-label="Menüyü aç">
          <i class="fas fa-bars text-2xl text-gray-700"></i>
        </button>
        <a href="/user/usermain"
          class="header-logo text-2xl font-bold text-gray-800 hover:text-indigo-600 transition-all duration-300 flex items-center">
          <i class="fas fa-utensils mr-2 text-orange-500 animate-pulse-fast"></i>eduyemek
        </a>
      </div>
      <div class="flex-1 w-full md:mx-4">
        <div class="relative">
          <input type="text" id="searchInput" placeholder="Restoran, mutfak veya yemek ara..."
            class="search-input w-full px-5 py-2 pl-10 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-700 shadow-sm transition-all duration-300"
            aria-label="Restoran veya yemek ara" />
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none"
            stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <div id="searchSuggestions"
            class="absolute top-full left-0 w-full bg-white border border-gray-200 rounded-b-lg shadow-xl z-50 hidden overflow-hidden transition-all duration-300 ease-in-out origin-top">
          </div>
        </div>
      </div>
      <div class="header-buttons hidden md:flex items-center space-x-3 w-full md:w-auto flex-wrap justify-center gap-2">
        <div class="relative w-full md:w-auto">
          <button id="addressBtn"
            class="address-btn flex items-center space-x-1 bg-white px-4 py-2 rounded-full text-gray-800 border border-gray-200 hover:border-indigo-300 hover:shadow-md transition-all duration-300 w-full md:w-auto justify-center group"
            aria-label="Teslimat adresini seç" aria-expanded="false">
            <svg class="w-4 h-4 text-indigo-500 group-hover:text-indigo-600 transition-colors duration-300" fill="none"
              stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <span id="selectedAddress" class="font-medium">Adres Seçin</span>
            <svg class="w-3 h-3 text-gray-500 transform group-hover:rotate-180 transition-transform duration-300"
              fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div id="addressDropdown"
            class="address-dropdown absolute hidden mt-1 w-full md:w-64 rounded-lg shadow-md z-50">
            <div class="p-3">
              <div class="text-xs font-semibold text-gray-700 mb-2">Teslimat Adresi</div>
              <ul id="addressList" class="space-y-1"></ul>
            </div>
          </div>
        </div>
        <div class="relative inline-block text-left group w-full md:w-auto">
          <a href="/user/usermain/account">
            <button
              class="account-btn flex items-center space-x-1 bg-white px-4 py-2 rounded-full text-gray-800 border border-gray-200 hover:bg-gray-50 hover:shadow-md transition-all duration-300 w-full md:w-auto justify-center"
              aria-label="Hesap menüsünü aç" aria-expanded="false">
              <svg class="w-4 h-4 text-indigo-500 transition-colors duration-300" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span class="font-medium">Hesabım</span>
              <svg class="w-3 h-3 text-gray-500 transform group-hover:rotate-180 transition-transform duration-300"
                fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
          </a>
          <div class="absolute left-0 top-full w-full h-3 z-40"></div>
          <div
            class="absolute left-0 mt-2 w-full md:w-48 glass-card border border-gray-200 rounded-lg shadow-xl z-50 hidden group-hover:block origin-top transform transition-all duration-300 ease-out scale-y-0 opacity-0 group-hover:scale-y-100 group-hover:opacity-100">
            <a href="/user/usermain/orders"
              class="block px-4 py-2 text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 rounded-t-lg text-sm transition-colors duration-200 relative">
              Siparişlerim
              <span id="orderBadge"
                class="notification-badge absolute top-2 right-2 w-4 h-4 text-xs rounded-full hidden"></span>
            </a>
            <a href="/user/usermain/addresses"
              class="block px-4 py-2 text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 text-sm transition-colors duration-200">Adreslerim</a>
            <a href="/user/usermain/userinfo"
              class="block px-4 py-2 text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 text-sm transition-colors duration-200">Kullanıcı
              Bilgilerim</a>
            <a href="/" onclick="logout()"
              class="block px-4 py-2 text-red-600 hover:bg-red-50 hover:text-red-700 rounded-b-lg text-sm transition-colors duration-200">Çıkış
              Yap</a>
          </div>
        </div>
        <button onclick="toggleBasketPanel(true)"
          class="cart-btn flex items-center space-x-2 btn-secondary px-4 py-2 rounded-full font-semibold w-full md:w-auto justify-center hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M3 3h2l.4 2M7 13h10l4-8H5.4m.6 10a1 1 0 102 0 1 1 0 00-2 0zm10 0a1 1 0 102 0 1 1 0 00-2 0z" />
          </svg>
          <span>Sepetim</span>
          <% if (cartCount> 0) { %>
            <div
              class="notification-badge absolute -top-1 -right-1 bg-red-500 w-5 h-5 text-white text-xs font-bold rounded-full flex items-center justify-center animate-bounce-once">
              <%= cartCount %>
            </div>
            <% } %>
        </button>
      </div>
    </div>
  </header>

  <div id="hamburgerMenu"
    class="fixed top-0 left-0 w-3/4 max-w-sm h-full bg-white shadow-xl transform -translate-x-full transition-transform duration-300 z-50">
    <div class="p-4 border-b">
      <h2 class="text-xl font-bold text-purple-600">Menü</h2>
      <button id="closeHamburgerBtn" class="absolute top-4 right-4 text-gray-500 hover:text-red-500"
        aria-label="Menüyü kapat">✖</button>
    </div>
    <nav class="p-4 space-y-2">
      <a href="/user/usermain" class="block text-gray-700 hover:text-indigo-600 relative">
        Ana Sayfa
        <span class="notification-badge absolute top-1 right-2 w-4 h-4 text-xs rounded-full hidden"></span>
      </a>
      <a href="/user/usermain/orders" class="block text-gray-700 hover:text-indigo-600 relative">
        Siparişlerim
        <span id="mobileOrderBadge"
          class="notification-badge absolute top-1 right-2 w-4 h-4 text-xs rounded-full hidden"></span>
      </a>
      <a href="/user/usermain/addresses" class="block text-gray-700 hover:text-indigo-600">Adreslerim</a>
      <a href="/" onclick="logout()" class="block text-red-600 hover:text-red-700">Çıkış Yap</a>
    </nav>
  </div>
  <div id="hamburgerOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-40 hidden"></div>

  <button id="mobileCartBtn"
    class="fixed bottom-4 right-4 md:hidden btn-secondary p-4 rounded-full shadow-lg flex items-center justify-center z-30"
    aria-label="Sepeti aç">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
        d="M3 3h2l.4 2M7 13h10l4-8H5.4m.6 10a1 1 0 102 0 1 1 0 00-2 0zm10 0a1 1 0 102 0 1 1 0 00-2 0z" />
    </svg>
    <% if (cartCount> 0) { %>
      <span
        class="notification-badge absolute -top-2 -right-2 w-6 h-6 text-xs font-bold rounded-full flex items-center justify-center">
        <%= cartCount %>
      </span>
      <% } %>
  </button>

  <div class="max-w-4xl mx-auto p-3">
    <div id="restaurantInfoContainer" class="p-4">
      <!-- Restaurant Card -->
    </div>
  </div>

  <div class="search-filters-container">
    <div class="category-filters" id="categoryFilters">
      <h3 class="text-lg font-semibold text-gray-700 mb-3 text-center">Kategoriler</h3>
      <button class="btn-toggle rounded-md transition active" data-category="all">Tümü</button>
    </div>
  </div>

  <div class="meals-container max-w-4xl mx-auto p-3">
    <div id="spinner" class="spinner hidden"></div>
    <div id="errorMessage" class="error-message hidden"></div>
    <div id="mealContainer" class="meals-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 auto-rows-auto">
    </div>
  </div>

  <div id="basketOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden" onclick="toggleBasketPanel(false)">
  </div>

  <div id="basketPanel"
    class="fixed top-0 right-0 w-full max-w-md h-full bg-white shadow-xl transform translate-x-full transition-transform duration-300 z-40 overflow-y-auto">
    <div class="p-4 border-b relative flex items-center">
      <h2 class="text-xl font-bold text-purple-600 mx-auto">Sepetiniz</h2>
      <button id="closeBasketBtn" class="absolute right-4 text-gray-500 hover:text-red-500 text-1xl font-bold">
        ❌
      </button>
    </div>

    <main class="px-4 py-6">
      <div id="basketStats" class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 animate-fade-in"></div>

      <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-6">
        <div id="restaurantInfo" class="p-4 border-b border-gray-200 hidden">
          <h2 class="text-lg font-semibold text-orange-600">
            Restoran: <span id="restaurantName" class="text-gray-900"></span>
          </h2>
        </div>
        <div id="basketContainer" class="p-4"></div>
      </div>

      <div id="basketSummary" class="bg-white rounded-xl shadow-lg p-4 hidden">
        <h3 class="text-base font-semibold text-purple-600 mb-2">Sipariş Özeti</h3>
        <div class="space-y-1 text-gray-600 text-sm">
          <div class="flex justify-between">
            <span>Ara Toplam:</span>
            <span id="subtotal"></span>
          </div>
          <hr class="my-2">
          <div class="flex justify-between font-semibold text-gray-800">
            <span>Toplam:</span>
            <span id="finalTotal" class="text-orange-500"></span>
          </div>
        </div>
      </div>

      <button id="confirmBasketBtn"
        class="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold px-4 py-2 rounded mt-4 hidden">
        Sepeti Onayla
      </button>
    </main>
  </div>

  <footer class="glass-card shadow-inner mt-auto py-4 relative z-10">
    <div class="max-w-3xl mx-auto px-2">
      <div class="text-center">

        <!-- Ortalanmış logo + gap -->
        <div
          class="flex justify-center items-center text-base font-bold text-gray-800 hover:text-indigo-600 transition-all duration-300 cursor-pointer mb-2">
          <i class="fas fa-utensils mr-2 text-orange-500 animate-pulse-fast"></i>
          eduyemek
        </div>

        <p class="text-gray-600 text-xs mb-2">Edu, kampüsün Sofrası</p>
        <div class="text-[10px] text-gray-500">© 2025 eduyemek. Tüm hakları saklıdır.</div>

      </div>
    </div>
  </footer>

  <script>
    let allMeals = [];
    let currentCategory = 'all';
    let searchTerm = '';
    const API_BASE_URL = '';

    function showNotification(message, type = 'success') {
      const existing = document.querySelector('.notification');
      if (existing) existing.remove();

      const notification = document.createElement('div');
      notification.className = `notification ${type === 'error' ? 'error' : ''}`;
      notification.innerHTML = `
      <div style="display: flex; align-items: center; gap: 12px;">
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
        <span>${message}</span>
      </div>
    `;
      document.body.appendChild(notification);

      setTimeout(() => notification.classList.add('show'), 100);
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      }, 2000);
    }

    function toggleSpinner(show) {
      document.getElementById('spinner').style.display = show ? 'block' : 'none';
    }

    function setupHamburgerMenu() {
      const hamburgerBtn = document.getElementById('hamburgerBtn');
      const hamburgerMenu = document.getElementById('hamburgerMenu');
      const hamburgerOverlay = document.getElementById('hamburgerOverlay');
      const closeHamburgerBtn = document.getElementById('closeHamburgerBtn');

      if (!hamburgerBtn || !hamburgerMenu || !hamburgerOverlay || !closeHamburgerBtn) return;

      hamburgerBtn.addEventListener('click', () => {
        hamburgerMenu.classList.add('open');
        hamburgerOverlay.classList.add('show');
        document.body.classList.add('menu-open');
        hamburgerBtn.setAttribute('aria-expanded', 'true');
      });

      closeHamburgerBtn.addEventListener('click', () => {
        hamburgerMenu.classList.remove('open');
        hamburgerOverlay.classList.remove('show');
        document.body.classList.remove('menu-open');
        hamburgerBtn.setAttribute('aria-expanded', 'false');
      });

      hamburgerOverlay.addEventListener('click', () => {
        hamburgerMenu.classList.remove('open');
        hamburgerOverlay.classList.remove('show');
        document.body.classList.remove('menu-open');
        hamburgerBtn.setAttribute('aria-expanded', 'false');
      });

      hamburgerMenu.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          hamburgerMenu.classList.remove('open');
          hamburgerOverlay.classList.remove('show');
          document.body.classList.remove('menu-open');
          hamburgerBtn.setAttribute('aria-expanded', 'false');
          hamburgerBtn.focus();
        }
      });
    }

    function setupBasketPanel() {
      const basketPanel = document.getElementById('basketPanel');
      const basketOverlay = document.getElementById('basketOverlay');
      const closeBasketBtn = document.getElementById('closeBasketBtn');
      const cartBtn = document.querySelector('.cart-btn');
      const mobileCartBtn = document.getElementById('mobileCartBtn');
      const confirmBasketBtn = document.getElementById('confirmBasketBtn');

      if (!basketPanel || !basketOverlay || !closeBasketBtn || !cartBtn || !mobileCartBtn || !confirmBasketBtn) return;

      window.toggleBasketPanel = function (show) {
        if (show) {
          basketPanel.classList.remove('translate-x-full');
          basketPanel.classList.add('translate-x-0');
          basketOverlay.classList.remove('hidden');
          loadBasketItems();
        } else {
          basketPanel.classList.remove('translate-x-0');
          basketPanel.classList.add('translate-x-full');
          basketOverlay.classList.add('hidden');
        }
      };

      basketPanel.addEventListener('click', (e) => e.stopPropagation());
      closeBasketBtn.addEventListener('click', () => toggleBasketPanel(false));
      cartBtn.addEventListener('click', () => toggleBasketPanel(true));
      mobileCartBtn.addEventListener('click', () => toggleBasketPanel(true));

      confirmBasketBtn.addEventListener('click', async () => {
        try {
          const response = await fetch('/user/usermain/validate-basket', {
            method: 'GET',
            headers: { 'Accept': 'application/json' }
          });
          const data = await response.json();
          if (!response.ok || !data.success) {
            showNotification(data.error || 'Sepet doğrulanamadı', 'error');
            return;
          }
          window.location.href = '/user/usermain/checkout';
        } catch (error) {
          console.error('Sepet doğrulama hatası:', error);
          showNotification(error.message || 'Sepet doğrulanırken hata oluştu', 'error');
        }
      });

      basketPanel.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          toggleBasketPanel(false);
          cartBtn.focus();
        }
      });
    }

    async function loadBasketItems() {
      const basketStats = document.getElementById('basketStats');
      const restaurantInfo = document.getElementById('restaurantInfo');
      const basketContainer = document.getElementById('basketContainer');
      const basketSummary = document.getElementById('basketSummary');
      const confirmBasketBtn = document.getElementById('confirmBasketBtn');
      const mobileCartBadge = document.querySelector('#mobileCartBtn .notification-badge');

      if (!basketContainer) return;

      basketContainer.innerHTML = '<p class="text-sm text-gray-400">Yükleniyor...</p>';

      try {
        const res = await fetch('/basket/adds', { headers: { 'Accept': 'application/json' } });
        if (!res.ok) {
          const errorData = await res.json();
          throw new Error(errorData.message || `Sepet bilgileri yüklenemedi: ${res.status}`);
        }
        const data = await res.json();

        if (!data.basket || !data.basket.items || data.basket.items.length === 0) {
          basketStats.innerHTML = '';
          restaurantInfo.classList.add('hidden');
          basketContainer.innerHTML = `
          <div class="text-center py-12">
            <i class="fas fa-shopping-cart text-4xl text-orange-500 mb-4"></i>
            <h3 class="text-xl font-medium text-gray-500 mb-2">Sepetiniz boş</h3>
            <p class="text-gray-400">Restorana geri dönerek ürün ekleyebilirsiniz.</p>
          </div>`;
          basketSummary.classList.add('hidden');
          confirmBasketBtn.classList.add('hidden');
          updateCartBadge(0);
          return;
        }

        const { items, itemCount, totalQuantity, totalPrice, restaurantName } = data.basket;

        restaurantInfo.classList.remove('hidden');
        document.getElementById('restaurantName').textContent = restaurantName;

        basketContainer.innerHTML = '';
        items.forEach(item => {
          const div = document.createElement('div');
          div.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-purple-50 transition-colors duration-200';
          div.innerHTML = `
          <div class="flex items-center gap-4 flex-1">
            <div class="w-16 h-16 rounded-lg overflow-hidden shadow-md">
              <img src="/Uploads/lahmacun.png" class="w-full h-full object-cover" loading="lazy" draggable="false" oncontextmenu="return false;" />
            </div>
            <div class="flex-1">
              <h3 class="font-semibold text-gray-800">${item.name}</h3>
              <p class="text-gray-600">Birim Fiyat: ${item.price.toFixed(2)}₺</p>
              <p class="text-sm text-gray-500">Toplam: ${(item.price * item.quantity).toFixed(2)}₺</p>
            </div>
          </div>
          <div class="flex items-center gap-3">
            <div class="flex items-center gap-2 bg-white rounded-lg border border-gray-300 px-3 py-2">
              <button class="quantity-btn decrease-btn text-red-500 hover:text-red-700 font-bold text-lg w-6 h-6 flex items-center justify-center hover:bg-red-50 rounded transition-colors duration-200" data-meal-id="${item.mealId}" data-action="decrease" aria-label="Miktarı azalt">−</button>
              <span class="quantity-display mx-3 font-semibold text-gray-800 min-w-[2rem] text-center">${item.quantity}</span>
              <button class="quantity-btn increase-btn text-green-500 hover:text-green-700 font-bold text-lg w-6 h-6 flex items-center justify-center hover:bg-green-50 rounded transition-colors duration-200" data-meal-id="${item.mealId}" data-action="increase" aria-label="Miktarı artır">+</button>
            </div>
            <button class="remove-item-btn text-red-500 hover:text-red-700 p-2 hover:bg-red-50 rounded-full transition-colors duration-200" data-meal-id="${item.mealId}" title="Sepetten Kaldır" aria-label="Ürünü sepetten kaldır">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        `;
          basketContainer.appendChild(div);
        });

        document.querySelectorAll('.quantity-btn').forEach(button => {
          button.addEventListener('click', async () => {
            const mealId = button.dataset.mealId;
            const action = button.dataset.action;
            await updateBasket(mealId, action);
          });
        });

        document.querySelectorAll('.remove-item-btn').forEach(button => {
          button.addEventListener('click', async () => {
            const mealId = button.dataset.mealId;
            await updateBasket(mealId, 'remove');
          });
        });

        basketSummary.classList.remove('hidden');
        document.getElementById('subtotal').textContent = `${totalPrice.toFixed(2)}₺`;
        document.getElementById('finalTotal').textContent = `${totalPrice.toFixed(2)}₺`;

        confirmBasketBtn.classList.remove('hidden');
        updateCartBadge(totalQuantity);
        if (mobileCartBadge) {
          mobileCartBadge.textContent = totalQuantity;
          mobileCartBadge.classList.toggle('hidden', totalQuantity === 0);
        }
      } catch (err) {
        basketContainer.innerHTML = '<p class="text-sm text-red-500">Sepet yüklenemedi.</p>';
        console.error(err);
        showNotification(err.message || 'Sepet yüklenirken hata oluştu.', 'error');
      }
    }

    async function updateBasket(mealId, action) {
      try {
        toggleSpinner(true);
        let endpoint = action === 'remove' ? '/basket/remove' : '/basket/update';
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mealId, action })
        });
        const data = await res.json();
        if (!res.ok) {
          throw new Error(data.message || `Sepet güncelleme hatası: ${res.status}`);
        }
        if (data.success) {
          showNotification(action === 'remove' ? 'Ürün sepetten kaldırıldı' : 'Sepet güncellendi', 'success');
          loadBasketItems();
        } else {
          showNotification(data.message || 'Bir hata oluştu', 'error');
        }
      } catch (error) {
        console.error('Hata:', error);
        showNotification(error.message || 'Sepet güncellenirken hata oluştu', 'error');
      } finally {
        toggleSpinner(false);
      }
    }

    function updateCartBadge(count) {
      const badge = document.querySelector('.cart-btn .notification-badge');
      if (badge) {
        badge.textContent = count;
        badge.classList.toggle('hidden', count === 0);
      }
    }

    async function addToBasket(button, mealId, name, price) {
      if (!mealId || typeof name !== 'string' || isNaN(price)) {
        showNotification('Geçersiz ürün bilgileri', 'error');
        return;
      }

      button.disabled = true;
      button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Ekleniyor...';

      try {
        const response = await fetch('/basket/add', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mealId, name, price, quantity: 1 })
        });

        const data = await response.json();
        if (!response.ok) {
          showNotification(data.error || 'Bir hata oluştu', 'error');
          return;
        }

        showNotification(data.message, 'success');
        loadBasketItems();
      } catch (error) {
        console.error('Hata:', error);
        showNotification('Sepete eklenirken hata oluştu', 'error');
      } finally {
        button.disabled = false;
        button.innerHTML = '<i class="fas fa-plus"></i> Ekle';
      }
    }

    async function initAddressDropdown() {
      const addressBtn = document.getElementById('addressBtn');
      const addressDropdown = document.getElementById('addressDropdown');
      const addressList = document.getElementById('addressList');
      const selectedAddress = document.getElementById('selectedAddress');

      if (!addressBtn || !addressDropdown || !addressList || !selectedAddress) return;

      try {
        const response = await fetch('/user/usermain/addresses', {
          headers: { 'Accept': 'application/json' }
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || `Adresler alınamadı: ${response.status}`);
        }
        const { addresses, selectedAddressId } = await response.json();
        addressList.innerHTML = '';
        if (!addresses || addresses.length === 0) {
          addressList.innerHTML = '<li class="text-gray-500 text-sm">Kayıtlı adres bulunamadı</li>';
        } else {
          addresses.forEach(addr => {
            const li = document.createElement('li');
            li.className = 'address-item px-2 py-2 rounded hover:bg-gray-100 cursor-pointer transition';
            li.dataset.addressId = addr._id;
            li.tabIndex = 0;
            li.innerHTML = `
            <div class="font-medium text-sm">${addr.title}</div>
            <div class="text-xs text-gray-500">${addr.formatted_address}</div>
          `;
            if (addr._id === selectedAddressId) {
              li.classList.add('bg-blue-100');
              selectedAddress.textContent = addr.title;
            }
            addressList.appendChild(li);
          });
        }
      } catch (error) {
        console.error('Adresler alınamadı:', error);
        addressList.innerHTML = '<li class="text-red-500 text-sm">Adresler yüklenemedi</li>';
        showNotification(error.message || 'Adresler yüklenirken hata oluştu.', 'error');
      }

      addressBtn.addEventListener('click', () => {
        addressDropdown.classList.toggle('hidden');
        addressBtn.setAttribute('aria-expanded', addressDropdown.classList.contains('hidden') ? 'false' : 'true');
      });

      document.addEventListener('click', e => {
        if (!addressBtn.contains(e.target) && !addressDropdown.contains(e.target)) {
          addressDropdown.classList.add('hidden');
          addressBtn.setAttribute('aria-expanded', 'false');
        }
      });

      addressList.addEventListener('click', async e => {
        const addressItem = e.target.closest('.address-item');
        if (addressItem) {
          const addressId = addressItem.dataset.addressId;
          const addressTitle = addressItem.querySelector('.font-medium').textContent;
          selectedAddress.textContent = addressTitle;
          document.querySelectorAll('.address-item').forEach(item => item.classList.remove('bg-blue-100'));
          addressItem.classList.add('bg-blue-100');
          addressDropdown.classList.add('hidden');
          addressBtn.setAttribute('aria-expanded', 'false');
          try {
            const response = await fetch('/user/usermain/selectaddress', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ addressId })
            });
            const data = await response.json();
            if (data.message) {
              showNotification('Adres seçildi!', 'success');
            } else {
              showNotification(data.error || 'Adres seçilemedi', 'error');
            }
          } catch (error) {
            console.error('Adres seçme hatası:', error);
            showNotification('Adres seçilirken hata oluştu', 'error');
          }
        }
      });

      addressList.addEventListener('keydown', e => {
        const items = Array.from(addressList.querySelectorAll('.address-item'));
        const current = document.activeElement;
        const index = items.indexOf(current);
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          const next = items[index + 1] || items[0];
          next.focus();
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          const prev = items[index - 1] || items[items.length - 1];
          prev.focus();
        } else if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          current.click();
        }
      });
    }

    function setupSearch() {
      const searchInput = document.getElementById('searchInput');
      const searchSuggestions = document.getElementById('searchSuggestions');

      if (!searchInput || !searchSuggestions) return;

      searchInput.addEventListener('input', debounce(async e => {
        const query = e.target.value.trim();
        if (query.length > 0) {
          try {
            const response = await fetch(`/user/usermain/search?q=${encodeURIComponent(query)}`);
            const suggestions = await response.json();
            searchSuggestions.innerHTML = '';
            suggestions.forEach(s => {
              const div = document.createElement('div');
              div.className = 'px-3 py-2 hover:bg-gray-100 cursor-pointer';
              div.textContent = s.type === 'restaurant'
                ? `${s.name} (Restoran)`
                : `${s.name} (Restoran: ${s.restaurantName})`;
              div.addEventListener('click', () => {
                if (s.type === 'restaurant') {
                  window.location.href = `/user/usermain/restaurant/${s.id}`;
                } else if (s.type === 'meal') {
                  window.location.href = `/user/usermain/restaurant/${s.restaurantId}`;
                }
              });
              searchSuggestions.appendChild(div);
            });
            searchSuggestions.classList.remove('hidden');
          } catch (error) {
            console.error('Search error:', error);
            showNotification('Arama önerileri alınamadı', 'error');
          }
        } else {
          searchSuggestions.classList.add('hidden');
        }
      }, 100));

      searchInput.addEventListener('blur', () => {
        setTimeout(() => searchSuggestions.classList.add('hidden'), 150);
      });

      searchInput.addEventListener('keydown', e => {
        if (e.key === 'Enter') {
          const firstSuggestion = searchSuggestions.querySelector('div');
          if (firstSuggestion) firstSuggestion.click();
        }
      });
    }

    function debounce(func, wait) {
      let timeout;
      return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
      };
    }

    async function loadRestaurantInfo() {
      const pathParts = window.location.pathname.split('/');
      const restaurantId = pathParts[pathParts.length - 1];

      if (!restaurantId) {
        showNotification('Restoran ID bulunmamaktadır.', 'error');
        return;
      }

      try {
        const response = await fetch(`/api/restaurant/${restaurantId}`)
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || `Restoran bilgileri yüklenemedi: ${response.status}`);
        }
        const restaurantData = await response.json();
        if (!restaurantData) {
          showNotification('Restoran verisi boş geldi.', 'error');
          return;
        }

        const container = document.getElementById('restaurantInfoContainer');
        container.innerHTML = `
          <div class="restaurant-card ${restaurantData.delivery.case === 'closed' ? 'closed' : ''} bg-white rounded-lg shadow-md max-w-xs mx-auto flex flex-col overflow-hidden">
            <img src="/Uploads/lahmacun.png" class="w-full h-full object-cover" loading="lazy" draggable="false" oncontextmenu="return false;" />
            <div class="flex flex-col justify-center items-center p-4 flex-grow text-center">
<h3 class="">${restaurantData.name || 'İsimsiz Restoran'}</h3>
              <p class="text-gray-600 text-xs line-clamp-1 mt-1">${restaurantData.description || 'Henüz açıklama yok.'}</p>
              <div class="flex flex-wrap gap-1.5 text-xs mt-2 justify-center">
                <div class="flex items-center space-x-1 ${restaurantData.delivery.case === 'open' ? 'bg-green-100 text-green-600' : 'bg-red-100 text-red-600'} px-1.5 py-0.5 rounded-full text-[10px]">
                  <span>${restaurantData.delivery.case === 'open' ? 'Açık' : 'Kapalı'}</span>
                </div>
                <div class="flex items-center space-x-1 bg-yellow-100 px-1.5 py-0.5 rounded-full text-[10px]">
                  <span>⭐ ${restaurantData.rating.average?.toFixed(1) || '0.0'}</span>
                </div>
                <div class="flex items-center text-gray-700 text-[10px]">
                  <strong class="mr-1">💰</strong> Min. ${restaurantData.delivery.minOrderAmount || 0} TL
                </div>
                <div class="flex items-center text-gray-700 text-[10px]">
                  <strong class="mr-1">🚚</strong> ${restaurantData.delivery.estimatedTime || 'Bilinmiyor'}
                </div>
                <div class="flex items-center text-gray-700 text-[10px]">
                  <strong class="mr-1">📍</strong> ${restaurantData.address || 'Bilinmiyor'}
                </div>
              </div>
            </div>
          </div>
        `;

      } catch (err) {
        console.error('Restoran bilgileri çekme hatası:', err);
        showNotification(err.message || 'Restoran bilgileri yüklenemedi.', 'error');
      }
    }

    function filterMeals() {
      const container = document.getElementById('mealContainer');
      container.innerHTML = '';

      let filteredMeals = allMeals;

      if (currentCategory !== 'all') {
        filteredMeals = filteredMeals.filter(meal =>
          (meal.category || 'Genel').toLowerCase() === currentCategory.toLowerCase()
        );
      }

      if (searchTerm) {
        filteredMeals = filteredMeals.filter(meal =>
          meal.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (meal.description || '').toLowerCase().includes(searchTerm.toLowerCase())
        );
      }

      if (filteredMeals.length === 0) {
        container.innerHTML = `
          <div class="empty-state" style="grid-column: 1 / -1;">
            <i class="fas fa-search"></i>
            <h3 style="font-size: 1.25rem; margin-bottom: 8px;">Aradığınız kriterlere uygun yemek bulunamadı</h3>
            <p>Farklı arama terimleri veya kategoriler deneyebilirsiniz</p>
          </div>
        `;
        return;
      }

      filteredMeals.forEach((meal, index) => {
        setTimeout(() => {
          const div = document.createElement('div');
          div.className = 'meal-card animate__animated animate__fadeInUp';
          div.style.animationDelay = `${index * 0.1}s`;
          div.innerHTML = `
            <div class="flex flex-col h-full rounded-lg overflow-hidden bg-white shadow-sm">
              <div class="relative">
                <img
                src="${meal.imageUrl || '/default-meal.jpg'}"
                alt="${meal.name}"
                class="w-full h-40 object-cover"
                onerror="this.src='/default-meal.jpg'"
                draggable="false"
                oncontextmenu="return false;"
              >
              </div>
              <div class="flex flex-row justify-between items-start p-3 gap-2 h-full">
                <div class="flex flex-col flex-1 overflow-hidden">
                  <h3 class="">${meal.name}</h3>
                  <p class="text-gray-600 text-xs mt-1 line-clamp-2">${meal.description || 'Lezzetli bir seçenek'}</p>
                </div>
                <div class="flex flex-col items-end justify-between text-right space-y-1 min-w-[70px]">
                  <div class="bg-yellow-100 text-yellow-800 px-2 py-0.5 rounded-full text-[11px] font-medium shadow whitespace-nowrap">
                    ${Number(meal.price).toFixed(2)} TL
                  </div>
                  <button class="add-to-cart-btn btn-secondary px-3 py-1 rounded-full text-[11px] font-semibold ${meal.available ? '' : 'opacity-50 cursor-not-allowed'}"
                    ${meal.available ? `onclick="addToBasket(this, '${meal._id}', '${meal.name.replace(/'/g, '\\\'')}', ${Number(meal.price)})"` : 'disabled'}
                  >
                    <i class="fas fa-plus mr-1"></i> Ekle
                  </button>
                </div>
              </div>
            </div>
          `;
          container.appendChild(div);
        }, 0);
      });



    }

    async function loadMeals() {
      const pathParts = window.location.pathname.split('/');
      const restaurantId = pathParts[pathParts.length - 1];
      if (!restaurantId) {
        showNotification('Restoran ID bulunamadı.', 'error');
        return;
      }

      toggleSpinner(true);
      try {
        const response = await fetch(`/api/user/usermain/restaurant/${restaurantId}`);
        if (!response.ok) {
          const contentType = response.headers.get('content-type');
          if (!contentType || !contentType.includes('application/json')) {
            throw new Error('Sunucudan beklenmeyen bir yanıt alındı (HTML).');
          }
          const errorData = await response.json();
          throw new Error(errorData.message || `Yemekler yüklenemedi: ${response.status}`);
        }
        const data = await response.json();
        if (!data || data.length === 0) {
          showNotification('Bu restoran için yemek bulunamadı.', 'error');
          document.getElementById('mealContainer').innerHTML = `
            <div class="empty-state" style="grid-column: 1 / -1;">
              <i class="fas fa-search"></i>
              <h3 style="font-size: 1.25rem; margin-bottom: 8px;">Bu restoran için yemek bulunamadı</h3>
              <p>Farklı bir restoran seçmeyi deneyebilirsiniz</p>
            </div>
          `;
          return;
        }
        allMeals = data;
        filterMeals();
        populateCategories();
      } catch (err) {
        console.error('Yemek yükleme hatası:', err);
        showNotification(err.message || 'Yemekler yüklenemedi.', 'error');
      } finally {
        toggleSpinner(false);
      }
    }

    function populateCategories() {
      const categoryFilters = document.getElementById('categoryFilters');
      categoryFilters.querySelectorAll('.btn-toggle').forEach(btn => btn.remove());

      const allBtn = document.createElement('button');
      allBtn.className = 'btn-toggle inline-flex items-center justify-center whitespace-nowrap text-center px-3 py-2 rounded-md transition active';
      allBtn.dataset.category = 'all';
      allBtn.textContent = 'Tümü';
      categoryFilters.appendChild(allBtn);

      const categories = new Set(allMeals.map(meal => meal.category).filter(Boolean));

      categories.forEach(category => {
        const button = document.createElement('button');
        button.className = 'btn-toggle inline-flex items-center justify-center whitespace-nowrap text-center px-3 py-2 rounded-md transition';
        button.dataset.category = category;
        button.textContent = category;
        categoryFilters.appendChild(button);
      });

      categoryFilters.addEventListener('click', (e) => {
        const target = e.target.closest('.btn-toggle');
        if (target) {
          document.querySelectorAll('.btn-toggle').forEach(btn => btn.classList.remove('active'));
          target.classList.add('active');
          currentCategory = target.dataset.category;
          filterMeals();
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      loadRestaurantInfo();
      loadMeals();
      setupHamburgerMenu();
      setupBasketPanel();
      loadBasketItems();
      initAddressDropdown();
      setupSearch();

      let lastScrollY = window.scrollY;
      let ticking = false;

      window.addEventListener('scroll', () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            const header = document.querySelector('header');
            const currentScrollY = window.scrollY;

            if (window.innerWidth < 768) {
              if (currentScrollY > lastScrollY && currentScrollY > 100) {
                header.classList.add('hidden');
              } else if (currentScrollY < lastScrollY) {
                header.classList.remove('hidden');
              }
            } else {
              if (currentScrollY > 50) {
                header.classList.add('shrunk');
              } else {
                header.classList.remove('shrunk');
              }
            }

            lastScrollY = currentScrollY;
            ticking = false;
          });
          ticking = true;
        }
      });

      window.addEventListener('resize', () => {
        const addressDropdown = document.getElementById('addressDropdown');
        const searchSuggestions = document.getElementById('searchSuggestions');
        const hamburgerMenu = document.getElementById('hamburgerMenu');
        if (window.innerWidth < 768) {
          if (addressDropdown) addressDropdown.classList.add('hidden');
          if (searchSuggestions) searchSuggestions.classList.add('hidden');
          if (hamburgerMenu) hamburgerMenu.classList.remove('open');
          document.getElementById('hamburgerOverlay').classList.remove('show');
          document.body.classList.remove('menu-open');
        }
      });
    });
  </script>
</body>

</html>