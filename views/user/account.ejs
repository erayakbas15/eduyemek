<!DOCTYPE html>
<html lang="tr" class="h-full">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Hesabım - eduyemek</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="icon" href="/ituyemek_logo.png" type="image/png">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

    body {
      font-family: 'Inter', sans-serif;
    }

    .hero-section {
      background: linear-gradient(135deg, #667eea, #764ba2);
    }

    .glass-card {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid rgba(209, 213, 219, 0.3);
      border-radius: 12px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.05);
    }

    .restaurant-card {
      background: #fff;
      border-radius: 0.75rem;
      transition: transform 0.2s, box-shadow 0.2s;
      cursor: pointer;
      width: 100%;
      max-width: 20rem;
      height: auto;
      min-height: 12.5rem;
      display: flex;
      flex-direction: column;
      overflow: hidden;
      position: relative;
    }

    .restaurant-card:hover {
      transform: translateY(-0.25rem);
      box-shadow: 0 0.375rem 1.25rem rgba(0, 0, 0, 0.08);
    }

    .restaurant-card.closed {
      background: #f5f5f5;
      cursor: not-allowed;
      opacity: 0.7;
    }

    .restaurant-card.closed:hover {
      transform: none;
      box-shadow: none;
    }

    .restaurant-card img {
      width: 100%;
      height: 7.5rem;
      object-fit: cover;
      border-radius: 0.75rem 0.75rem 0 0;
      flex-shrink: 0;
    }

    .search-input {
      background: #fff;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      transition: border-color 0.2s, box-shadow 0.2s, transform 0.2s;
    }

    .search-input:focus {
      border-color: #667eea;
      box-shadow: 0 0 8px rgba(102, 126, 234, 0.2);
      transform: scale(1.02);
    }

    .btn-primary {
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 8px;
      color: #fff;
      font-weight: 600;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-primary:hover {
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.2);
    }

    .btn-primary.active {
      background: linear-gradient(135deg, #10b981, #059669);
    }

    .btn-primary:active {
      transform: scale(0.95);
    }

    .btn-secondary {
      background: linear-gradient(135deg, #f43f5e, #fb923c);
      border-radius: 8px;
      color: #fff;
      font-weight: 600;
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .btn-secondary:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 35px rgba(255, 216, 155, 0.4);
    }

    .btn-secondary.active {
      background: linear-gradient(135deg, #10b981, #059669);
    }

    .btn-secondary:active {
      transform: scale(0.95);
    }

    .address-dropdown {
      background: rgba(255, 255, 255, 0.95);
      border: 1px solid rgba(209, 213, 219, 0.3);
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .feature-icon {
      font-weight: 700;
    }

    .notification-badge {
      background: linear-gradient(135deg, #ff0000 0%, #e14a14 100%);
      animation: bounce 2s infinite;
    }

    .notification {
      position: fixed;
      top: 0.75rem;
      right: 0.75rem;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      background: linear-gradient(135deg, #10b981, #059669);
      font-weight: 500;
      transform: translateX(100%);
      transition: transform 0.2s ease-in-out;
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      color: white;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification.success {
      background: linear-gradient(135deg, #10b981, #059669);
    }

    .notification.error {
      background: linear-gradient(135deg, #ef4444, #dc2626);
    }

    .btn-toggle {
      background: #e5e7eb;
      color: #374151;
      border-radius: 8px;
      font-weight: 600;
      transition: background 0.2s, color 0.2s, transform 0.2s;
    }

    .btn-toggle.active {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: #fff;
    }

    .btn-toggle:hover {
      transform: translateY(-1px);
      background: #d1d5db;
    }

    .btn-toggle.active:hover {
      background: linear-gradient(135deg, #5a6dd8, #6a3b92);
    }

    @keyframes bounce {

      0%,
      100% {
        transform: translateY(0);
      }

      50% {
        transform: translateY(-3px);
      }
    }

    .loading-spinner {
      width: 16px;
      height: 16px;
      border: 2px solid #e5e7eb;
      border-top: 2px solid #667eea;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    header.shrunk {
      padding: 0.5rem 1rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    header.shrunk .header-logo {
      font-size: 1.5rem;
    }

    header.shrunk .search-input {
      padding: 0.5rem 0.75rem 0.5rem 2rem;
    }

    header.hidden {
      transform: translateY(-100%);
      transition: transform 0.3s;
    }

    #hamburgerMenu {
      transform: translateX(-100%);
      transition: transform 0.3s;
    }

    #hamburgerMenu.open {
      transform: translateX(0);
    }

    #hamburgerOverlay.show {
      display: block;
    }

    body.menu-open {
      overflow: hidden;
    }

    .swiper-container {
      padding: 0 1rem;
    }

    .swiper-slide {
      width: auto;
    }

    .promotion-badge {
      position: absolute;
      top: 8px;
      left: 8px;
      background: #ef4444;
      color: white;
      font-size: 0.65rem;
      padding: 4px 8px;
      border-radius: 9999px;
    }

    main {
      max-width: 100%;
      width: 100%;
      padding: 1rem;
      box-sizing: border-box;
    }

    .grid {
      display: grid;
      gap: 1rem;
      justify-content: center;
    }

    @media (prefers-color-scheme: dark) {

      body,
      .bg-gray-50 {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      header {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      .glass-card {
        background: rgba(30, 30, 30, 0.95) !important;
        border: 1px solid rgba(255, 255, 255, 0.1) !important;
        color: #ffffff !important;
      }

      .restaurant-card {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border: 1px solid #404040;
      }

      .restaurant-card h3 {
        font-weight: 700 !important;
        color: #ffffff !important;
      }


      .restaurant-card p {
        color: #cccccc !important;
      }

      .restaurant-card .text-sm {
        color: #999999 !important;
      }

      .restaurant-card.closed {
        background: #1a1a1a !important;
        color: #666666 !important;
      }

      .search-input {
        background: #2d2d2d !important;
        border-color: #404040 !important;
        color: #ffffff !important;
      }

      .search-input::placeholder {
        color: #999999 !important;
      }

      .btn-toggle {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border: 1px solid #404040;
      }

      .btn-toggle:hover {
        background: #404040 !important;
      }

      .address-dropdown {
        background: #2d2d2d !important;
        border: 1px solid #404040 !important;
        color: #ffffff !important;
      }

      .loading-spinner {
        border-color: #404040 !important;
        border-top-color: #667eea !important;
      }

      /* Header ve nav bileşenleri */
      .header-logo {
        color: #ffffff !important;
      }

      #hamburgerMenu {
        background: #2d2d2d !important;
        color: #ffffff !important;
      }

      #hamburgerMenu nav a {
        color: #ffffff !important;
      }

      #hamburgerMenu nav a:hover {
        color: #667eea !important;
      }

      /* Adres ve hesap butonları */
      .address-btn,
      .account-btn {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border-color: #404040 !important;
      }

      .address-btn:hover,
      .account-btn:hover {
        background: #404040 !important;
      }

      /* Dropdown menüler */
      #addressDropdown,
      .group-hover\:block {
        background: #2d2d2d !important;
        border-color: #404040 !important;
      }

      #addressDropdown .text-xs {
        color: #cccccc !important;
      }


      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        color: #ffffff !important;
      }

      p,
      span,
      div {
        color: #ffffff !important;
      }

      .text-gray-600 {
        color: #cccccc !important;
      }

      .text-gray-500 {
        color: #999999 !important;
      }

      .text-gray-400 {
        color: #666666 !important;
      }

      .text-gray-700 {
        color: #ffffff !important;
      }

      .text-gray-800 {
        color: #ffffff !important;
      }

      .text-gray-900 {
        color: #ffffff !important;
      }

      /* Footer ve diğer bölümler */
      footer {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      /* Menü ve navigasyon */
      nav {
        background: #1a1a1a !important;
        color: #ffffff !important;
      }

      /* Kartlar içindeki tüm yazılar */
      .restaurant-card * {
        color: inherit !important;
      }

      /* Form elementleri */
      input,
      textarea,
      select {
        background: #2d2d2d !important;
        color: #ffffff !important;
        border-color: #404040 !important;
      }

      /* Link renkleri */
      a {
        color: #667eea !important;
      }

      a:hover {
        color: #5a6dd8 !important;
      }

      /* SVG ikonları */
      svg {
        color: inherit !important;
      }

      /* Sepet paneli */
      #basketPanel {
        background: #262121 !important;
        color: #ffffff !important;
      }


      #basketPanel h2 {
        color: #F97316 !important;
      }

      #restaurantName {
        color: #000000 !important;
      }

      #basketPanel h3 {
        color: #ffffff !important;
      }

      #basketContainer {
        background: #2d2d2d !important;
      }

      #basketSummary {
        background: #2d2d2d !important;
        border: 1px solid #404040 !important;
      }

      .quantity-display {
        color: black !important;
      }

      /* Arama önerileri */
      #searchSuggestions {
        background: #2d2d2d !important;
        border-color: #404040 !important;
        color: #ffffff !important;
      }

      /* Özellik kartları */
      .feature {
        color: #ffffff !important;
      }

      .feature h3 {
        color: #ffffff !important;
      }

      .feature p {
        color: #cccccc !important;
      }

      /* Rozet ve durumlar */
      .bg-green-100 {
        background: rgba(34, 197, 94, 0.2) !important;
      }

      .bg-red-100 {
        background: rgba(239, 68, 68, 0.2) !important;
      }

      .bg-yellow-100 {
        background: rgba(251, 191, 36, 0.2) !important;
      }

      .text-green-600 {
        color: #22c55e !important;
      }

      .text-red-600 {
        color: #ef4444 !important;
      }

      .text-yellow-600 {
        color: #eab308 !important;
      }
    }


    @media (max-width: 1024px) {
      .hero-section h1 {
        font-size: 1.875rem;
      }

      .hero-section p {
        font-size: 0.875rem;
      }

      .restaurant-card {
        max-width: 18rem;
        min-height: 11.5rem;
      }

      .restaurant-card img {
        height: 7rem;
      }
    }

    @media (max-width: 768px) {
      header {
        padding: 0.5rem 1rem;
      }

      .header-logo {
        font-size: 1.25rem;
      }

      .search-input {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem 0.5rem 2rem;
      }

      .search-input+svg {
        width: 0.875rem;
        height: 0.875rem;
        left: 0.75rem;
      }

      .address-dropdown {
        width: 100%;
        max-width: 16rem;
      }

      .hero-section {
        padding: 2rem 0;
      }

      .hero-section h1 {
        font-size: 1.5rem;
      }

      .hero-section p {
        font-size: 0.75rem;
      }

      .hero-section .flex {
        flex-direction: column;
        gap: 0.5rem;
      }

      .restaurant-card {
        max-width: 100%;
        min-height: 10rem;
      }

      .restaurant-card img {
        height: 6rem;
      }

      .feature-grid {
        grid-template-columns: 1fr;
      }

      footer {
        padding: 1rem 0;
      }

      footer .text-xl {
        font-size: 1.25rem;
      }

      footer .space-x-4 {
        flex-direction: column;
        gap: 0.5rem;
      }
    }

    @media (max-width: 480px) {
      .search-input {
        width: 100%;
      }

      .header-buttons {
        flex-direction: column;
        gap: 0.5rem;
      }

      .address-btn,
      .account-btn,
      .cart-btn {
        width: 100%;
        justify-content: center;
      }

      .restaurant-card {
        max-width: 100%;
        min-height: 9rem;
      }

      .restaurant-card img {
        height: 5rem;
      }

      .notification {
        width: 90%;
        font-size: 0.75rem;
      }
    }
  </style>
</head>

<body class="bg-gray-50 font-sans min-h-screen text-gray-900 flex flex-col">
  <!-- Header Section -->
  <header class="glass-card shadow-lg sticky top-0 z-40 transform transition-all duration-300">
    <div class="max-w-7xl mx-auto px-4 py-3 flex flex-col md:flex-row justify-between items-center gap-2">
      <a href="/user/usermain"
        class="header-logo text-2xl font-bold text-gray-800 hover:text-indigo-600 transition-all duration-300 flex items-center">
        <i class="fas fa-utensils mr-2 text-orange-500 animate-pulse-fast"></i>eduyemek
      </a>

      <div class="flex-1 w-full md:mx-4">
        <div class="relative">
          <input type="text" id="searchInput" placeholder="Restoran, mutfak veya yemek ara..."
            class="search-input w-full px-5 py-2 pl-10 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-indigo-500 text-gray-700 shadow-sm transition-all duration-300" />
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" fill="none"
            stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          <div id="searchSuggestions"
            class="absolute top-full left-0 w-full bg-white border border-gray-200 rounded-b-lg shadow-xl z-50 hidden overflow-hidden transition-all duration-300 ease-in-out origin-top">
          </div>
        </div>
      </div>

      <div class="header-buttons flex items-center space-x-3 w-full md:w-auto flex-wrap justify-center gap-2">
        <div class="relative w-full md:w-auto">
          <button id="addressBtn"
            class="address-btn flex items-center space-x-1 bg-white px-4 py-2 rounded-full text-gray-800 border border-gray-200 hover:border-indigo-300 hover:shadow-md transition-all duration-300 w-full md:w-auto justify-center group">
            <svg class="w-4 h-4 text-indigo-500 group-hover:text-indigo-600 transition-colors duration-300" fill="none"
              stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <span id="selectedAddress" class="font-medium">Adres Seçin</span>
            <svg class="w-3 h-3 text-gray-500 transform group-hover:rotate-180 transition-transform duration-300"
              fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
          <div id="addressDropdown"
            class="address-dropdown absolute hidden mt-1 w-full md:w-64 rounded-lg shadow-md z-50">
            <div class="p-3">
              <div class="text-xs font-semibold text-gray-700 mb-2">Teslimat Adresi</div>
              <ul id="addressList" class="space-y-1">
                <!-- Addresses will be populated dynamically -->
              </ul>
            </div>
          </div>
        </div>

        <div class="relative inline-block text-left group w-full md:w-auto">
          <a href="/user/usermain/account">
            <button
              class="account-btn flex items-center space-x-1 bg-white px-4 py-2 rounded-full text-gray-800 border border-gray-200 hover:bg-gray-50 hover:shadow-md transition-all duration-300 w-full md:w-auto justify-center">
              <svg class="w-4 h-4 text-gray-600 transition-colors duration-300" fill="none" stroke="currentColor"
                viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                  d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span class="font-medium">Hesabım</span>
              <svg class="w-3 h-3 text-gray-500 transform group-hover:rotate-180 transition-transform duration-300"
                fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
          </a>
          <div class="absolute left-0 top-full w-full h-3 z-40"></div>
          <div
            class="absolute left-0 mt-2 w-full md:w-48 glass-card border border-gray-200 rounded-lg shadow-xl z-50 hidden group-hover:block origin-top transform transition-all duration-300 ease-out scale-y-0 opacity-0 group-hover:scale-y-100 group-hover:opacity-100">
            <a href="/user/usermain/orders"
              class="block px-4 py-2 text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 rounded-t-lg text-sm transition-colors duration-200">Siparişlerim</a>
            <a href="/user/usermain/addresses"
              class="block px-4 py-2 text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 text-sm transition-colors duration-200">Adreslerim</a>
            <a href="/user/usermain/userinfo"
              class="block px-4 py-2 text-gray-700 hover:bg-indigo-50 hover:text-indigo-700 text-sm transition-colors duration-200">Kullanıcı
              Bilgilerim</a>
            <a href="/" onclick="logout()"
              class="block px-4 py-2 text-red-600 hover:bg-red-50 hover:text-red-700 rounded-b-lg text-sm transition-colors duration-200">Çıkış
              Yap</a>
          </div>
        </div>

        <button onclick="toggleBasketPanel(true)"
          class="cart-btn relative flex items-center space-x-2 btn-secondary px-4 py-2 rounded-full font-semibold w-full md:w-auto justify-center hover:shadow-lg transform hover:-translate-y-1 transition-all duration-300">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M3 3h2l.4 2M7 13h10l4-8H5.4m.6 10a1 1 0 102 0 1 1 0 00-2 0zm10 0a1 1 0 102 0 1 1 0 00-2 0z" />
          </svg>
          <span>Sepetim</span>
          <% if (cartCount> 0) { %>
            <div
              class="notification-badge absolute -top-1 -right-1 bg-red-500 w-5 h-5 text-white text-xs font-bold rounded-full flex items-center justify-center animate-bounce-once">
              <%= cartCount %>
            </div>
            <% } %>
        </button>
      </div>
    </div>
  </header>

  <!-- Hero Section -->
  <section class="hero-section py-6 relative z-10">
    <div class="max-w-3xl mx-auto px-2 text-center">
      <h1 class="text-2xl md:text-3xl font-bold text-white mb-2 animate__animated animate__fadeInUp">
        Hoş Geldin!
      </h1>
      <p class="text-sm md:text-base text-white/90 mb-1 animate__animated animate__fadeInUp animate__delay-1s">
        Giriş yapan kullanıcı:
        <span id="userEmail" class="font-semibold text-yellow-300">
          <%= user ? user.email : 'Misafir' %>
        </span>
      </p>
      <p class="text-sm md:text-base text-white/90 animate__animated animate__fadeInUp animate__delay-1s">
        Keyifli siparişler dileriz
      </p>
    </div>
  </section>

  <!-- Main Section -->
  <main class="max-w-7xl mx-auto p-4 flex-grow relative z-10">
    <div class="glass-card rounded-2xl shadow-md p-6 animate__animated animate__fadeIn">
      <h2 class="text-2xl font-bold mb-6 text-gray-800 text-center">Hesap İşlemleri</h2>
      <% if (error) { %>
        <div class="notification error show">
          <%= error %>
        </div>
        <% } %>
          <div class="grid gap-4 md:grid-cols-2 lg:grid-cols-2">
            <div class="account-card p-6 shadow-md cursor-pointer"
              onclick="window.location.href='/user/usermain/orders'">
              <div class="text-center">
                <div
                  class="w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-blue-400 to-purple-500 rounded-lg flex items-center justify-center text-2xl">
                  📦
                </div>
                <h3 class="text-lg font-bold text-gray-800 mb-1">Siparişlerim</h3>
                <p class="text-gray-600 text-sm">Geçmiş siparişlerini görüntüle ve takip et</p>
                <div class="flex items-center justify-center space-x-1 text-xs text-purple-600 mt-2">
                  <span>
                    <%= activeOrderCount %> aktif sipariş
                  </span>
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </div>
            </div>
            <div class="account-card p-6 shadow-md cursor-pointer"
              onclick="window.location.href='/user/usermain/addresses'">
              <div class="text-center">
                <div
                  class="w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-green-400 to-blue-500 rounded-lg flex items-center justify-center text-2xl">
                  🏠
                </div>
                <h3 class="text-lg font-bold text-gray-800 mb-1">Adreslerim</h3>
                <p class="text-gray-600 text-sm">Teslimat adreslerini yönet</p>
                <div class="flex items-center justify-center space-x-1 text-xs text-green-600 mt-2">
                  <span>
                    <%= addresses.length %> kayıtlı adres
                  </span>
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </div>
            </div>
            <div class="account-card p-6 shadow-md cursor-pointer"
              onclick="window.location.href='/user/usermain/userinfo'">
              <div class="text-center">
                <div
                  class="w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-lg flex items-center justify-center text-2xl">
                  👤
                </div>
                <h3 class="text-lg font-bold text-gray-800 mb-1">Kullanıcı Bilgilerim</h3>
                <p class="text-gray-600 text-sm">Kişisel bilgilerini düzenle</p>
                <div class="flex items-center justify-center space-x-1 text-xs text-orange-600 mt-2">
                  <span>Profil <%= user && user.firstName && user.lastName ? 'tamamlandı' : 'eksik' %>
                  </span>
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </div>
              </div>
            </div>
            <div class="account-card p-6 shadow-md cursor-pointer" onclick="logout()">
              <div class="text-center">
                <div
                  class="w-12 h-12 mx-auto mb-3 bg-gradient-to-br from-red-400 to-pink-500 rounded-lg flex items-center justify-center text-2xl">
                  ⏻
                </div>
                <h3 class="text-lg font-bold text-gray-800 mb-1">Çıkış Yap</h3>
                <p class="text-gray-600 text-sm">Hesabından güvenli çıkış yap</p>
                <div class="flex items-center justify-center space-x-1 text-xs text-red-600 mt-2">
                  <span>Güvenli çıkış</span>
                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                      d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
    </div>
  </main>

  <footer class="glass-card shadow-inner mt-auto py-4 relative z-10">
    <div class="max-w-3xl mx-auto px-2">
      <div class="text-center">

        <!-- Ortalanmış logo + gap -->
        <div
          class="flex justify-center items-center text-base font-bold text-gray-800 hover:text-indigo-600 transition-all duration-300 cursor-pointer mb-2">
          <i class="fas fa-utensils mr-2 text-orange-500 animate-pulse-fast"></i>
          eduyemek
        </div>

        <p class="text-gray-600 text-xs mb-2">Edu, kampüsün Sofrası</p>
        <div class="text-[10px] text-gray-500">© 2025 eduyemek.com - Tüm hakları saklıdır.</div>

      </div>
    </div>
  </footer>

  <!-- Basket Overlay and Panel -->
  <div id="basketOverlay" class="fixed inset-0 bg-black bg-opacity-50 z-30 hidden" onclick="toggleBasketPanel(false)">
  </div>

  <div id="basketPanel"
    class="fixed top-0 right-0 w-full max-w-md h-full bg-white shadow-xl transform translate-x-full transition-transform duration-300 z-40 overflow-y-auto">
    <div class="p-4 border-b relative flex items-center">
      <h2 class="text-xl font-bold text-purple-600 mx-auto">Sepetiniz</h2>
      <button id="closeBasketBtn" class="absolute right-4 text-gray-500 hover:text-red-500 text-1xl font-bold">
        ❌
      </button>
    </div>

    <main class="px-4 py-6">
      <div id="basketStats" class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6 animate-fade-in"></div>

      <div class="bg-white rounded-xl shadow-lg overflow-hidden mb-6">
        <div id="restaurantInfo" class="p-4 border-b border-gray-200 hidden">
          <h2 class="text-lg font-semibold text-orange-600">
            Restoran: <span id="restaurantName" class="text-gray-900"></span>
          </h2>
        </div>
        <div id="basketContainer" class="p-4"></div>
      </div>

      <div id="basketSummary" class="bg-white rounded-xl shadow-lg p-4 hidden">
        <h3 class="text-base font-semibold text-purple-600 mb-2">Sipariş Özeti</h3>
        <div class="space-y-1 text-gray-600 text-sm">
          <div class="flex justify-between">
            <span>Ara Toplam:</span>
            <span id="subtotal"></span>
          </div>
          <hr class="my-2">
          <div class="flex justify-between font-semibold text-gray-800">
            <span>Toplam:</span>
            <span id="finalTotal" class="text-orange-500"></span>
          </div>
        </div>
      </div>

      <button id="confirmBasketBtn"
        class="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold px-4 py-2 rounded mt-4 hidden">
        Sepeti Onayla
      </button>
    </main>
  </div>


  <script>
    function getToken() {
      return document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1] || null;
    }

    // Notification function
    function showNotification(message, type = 'success') {
      const existing = document.querySelector('.notification');
      if (existing) existing.remove();

      const notification = document.createElement('div');
      notification.className = `notification ${type === 'error' ? 'error' : ''}`;
      notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 12px;">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
      document.body.appendChild(notification);

      setTimeout(() => notification.classList.add('show'), 100);
      setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => notification.remove(), 300);
      }, 2000);
    }

    // Spinner toggle function
    function toggleSpinner(show) {
      const spinner = document.getElementById('spinner');
      if (spinner) spinner.style.display = show ? 'block' : 'none';
    }



    function setupBasketPanel() {
      const basketPanel = document.getElementById('basketPanel');
      const basketOverlay = document.getElementById('basketOverlay');
      const closeBasketBtn = document.getElementById('closeBasketBtn');
      const cartBtn = document.querySelector('.cart-btn');
      const confirmBasketBtn = document.getElementById('confirmBasketBtn');

      window.toggleBasketPanel = function (show) {
        if (show) {
          basketPanel.classList.remove('translate-x-full');
          basketPanel.classList.add('translate-x-0');
          basketOverlay.classList.remove('hidden');
          loadBasketItems();
        } else {
          basketPanel.classList.remove('translate-x-0');
          basketPanel.classList.add('translate-x-full');
          basketOverlay.classList.add('hidden');
        }
      }

      basketPanel.addEventListener('click', (e) => e.stopPropagation());
      closeBasketBtn.addEventListener('click', () => toggleBasketPanel(false));
      cartBtn.addEventListener('click', () => toggleBasketPanel(true));

      confirmBasketBtn.addEventListener('click', () => {
        window.location.href = '/user/usermain/checkout';
      });
    }



    async function loadBasketItems() {
      const basketStats = document.getElementById('basketStats');
      const restaurantInfo = document.getElementById('restaurantInfo');
      const basketContainer = document.getElementById('basketContainer');
      const basketSummary = document.getElementById('basketSummary');
      const confirmBasketBtn = document.getElementById('confirmBasketBtn');

      basketContainer.innerHTML = '<p class="text-sm text-gray-400">Yükleniyor...</p>';

      try {
        const res = await fetch('/basket/adds', { headers: { 'Accept': 'application/json' } });
        if (!res.ok) {
          const errorData = await res.json();
          throw new Error(errorData.message || `Sepet bilgileri yüklenemedi: ${res.status}`);
        }
        const data = await res.json();

        if (!data.basket || !data.basket.items || data.basket.items.length === 0) {
          basketStats.innerHTML = '';
          restaurantInfo.classList.add('hidden');
          basketContainer.innerHTML = `
          <div class="text-center py-12">
            <i class="fas fa-shopping-cart text-4xl text-orange-500 mb-4"></i>
            <h3 class="text-xl font-medium text-gray-500 mb-2">Sepetiniz boş</h3>
            <p class="text-gray-400">Restorana geri dönerek ürün ekleyebilirsiniz.</p>
          </div>`;
          basketSummary.classList.add('hidden');
          confirmBasketBtn.classList.add('hidden');
          updateCartBadge(0);
          return;
        }

        const { items, itemCount, totalQuantity, totalPrice, restaurantName } = data.basket;

        restaurantInfo.classList.remove('hidden');
        document.getElementById('restaurantName').textContent = restaurantName;

        basketContainer.innerHTML = '';
        items.forEach(item => {
          const div = document.createElement('div');
          div.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-purple-50 transition-colors duration-200';
          div.innerHTML = `
          <div class="flex items-center gap-4 flex-1">
<div class="w-16 h-16 rounded-lg overflow-hidden shadow-md">
  <img src="/uploads/lahmacun.png" alt="Açıklama" class="w-full h-full object-cover" />
</div>

            <div class="flex-1">
              <h3 class="font-semibold text-gray-800">${item.name}</h3>
              <p class="text-gray-600">Birim Fiyat: ${item.price.toFixed(2)}₺</p>
              <p class="text-sm text-gray-500">Toplam: ${(item.price * item.quantity).toFixed(2)}₺</p>
            </div>
          </div>
          <div class="flex items-center gap-3">
            <div class="flex items-center gap-2 bg-white rounded-lg border border-gray-300 px-3 py-2">
              <button class="quantity-btn decrease-btn text-red-500 hover:text-red-700 font-bold text-lg w-6 h-6 flex items-center justify-center hover:bg-red-50 rounded transition-colors duration-200" data-meal-id="${item.mealId}" data-action="decrease">−</button>
              <span class="quantity-display mx-3 font-semibold text-gray-800 min-w-[2rem] text-center">${item.quantity}</span>
              <button class="quantity-btn increase-btn text-green-500 hover:text-green-700 font-bold text-lg w-6 h-6 flex items-center justify-center hover:bg-green-50 rounded transition-colors duration-200" data-meal-id="${item.mealId}" data-action="increase">+</button>
            </div>
            <button class="remove-item-btn text-red-500 hover:text-red-700 p-2 hover:bg-red-50 rounded-full transition-colors duration-200" data-meal-id="${item.mealId}" title="Sepetten Kaldır">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        `;
          basketContainer.appendChild(div);
        });

        document.querySelectorAll('.quantity-btn').forEach(button => {
          button.addEventListener('click', async () => {
            const mealId = button.dataset.mealId;
            const action = button.dataset.action;
            await updateBasket(mealId, action);
          });
        });

        document.querySelectorAll('.remove-item-btn').forEach(button => {
          button.addEventListener('click', async () => {
            const mealId = button.dataset.mealId;
            await updateBasket(mealId, 'remove');
          });
        });

        basketSummary.classList.remove('hidden');
        document.getElementById('subtotal').textContent = `${totalPrice.toFixed(2)}₺`;
        document.getElementById('finalTotal').textContent = `${totalPrice.toFixed(2)}₺`;

        confirmBasketBtn.classList.remove('hidden');
        updateCartBadge(totalQuantity);
      } catch (err) {
        basketContainer.innerHTML = '<p class="text-sm text-red-500">Sepet yüklenemedi.</p>';
        console.error(err);
        showNotification(err.message || 'Sepet yüklenirken hata oluştu.', 'error');
      }
    }



    async function updateBasket(mealId, action) {
      try {
        toggleSpinner(true);
        let endpoint = action === 'remove' ? '/basket/remove' : '/basket/update';
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ mealId, action })
        });
        const data = await res.json();
        if (!res.ok) {
          throw new Error(data.message || `Sepet güncelleme hatası: ${res.status}`);
        }
        if (data.success) {
          showNotification(action === 'remove' ? 'Ürün sepetten kaldırıldı' : 'Sepet güncellendi', 'success');
          loadBasketItems();
        } else {
          showNotification(data.message || 'Bir hata oluştu', 'error');
        }
      } catch (error) {
        console.error('Hata:', error);
        showNotification(error.message || 'Sepet güncellenirken hata oluştu', 'error');
      } finally {
        toggleSpinner(false);
      }
    }

    function updateCartBadge(count) {
      const badge = document.querySelector('.notification-badge');
      if (badge) {
        badge.textContent = count;
        badge.style.display = count > 0 ? 'flex' : 'none';
      }
    }


    // Toggle address dropdown
    const addressBtn = document.getElementById('addressBtn');
    const addressDropdown = document.getElementById('addressDropdown');
    const addressList = document.getElementById('addressList');
    const selectedAddress = document.getElementById('selectedAddress');

    addressBtn.addEventListener('click', () => {
      addressDropdown.classList.toggle('hidden');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', e => {
      if (!addressBtn.contains(e.target) && !addressDropdown.contains(e.target)) {
        addressDropdown.classList.add('hidden');
      }
    });

    // Populate address dropdown and other initializations
    document.addEventListener('DOMContentLoaded', async () => {
      // Initialize basket panel
      setupBasketPanel();
      loadBasketItems();

      try {
        const response = await fetch('/user/usermain/addresses', {
          headers: { 'Accept': 'application/json', 'Authorization': `Bearer ${getToken()}` }
        });
        if (!response.ok) throw new Error('Adresler alınamadı');
        const { addresses, selectedAddressId } = await response.json();

        addressList.innerHTML = '';

        if (addresses.length === 0) {
          addressList.innerHTML = '<li class="text-gray-500 text-sm px-2 py-2">Kayıtlı adres bulunamadı</li>';
        } else {
          addresses.forEach(addr => {
            const li = document.createElement('li');
            li.className = 'address-item px-2 py-2 rounded hover:bg-gray-100 cursor-pointer transition';
            li.dataset.addressId = addr._id;
            li.dataset.address = addr.title;
            li.innerHTML = `
                    <div class="font-medium text-sm">${addr.title}</div>
                    <div class="text-xs text-gray-500">${addr.address}</div>
                `;
            if (addr._id === selectedAddressId) {
              li.classList.add('bg-blue-100');
              selectedAddress.textContent = addr.title;
            }
            addressList.appendChild(li);
          });
        }

        document.querySelectorAll('.address-item').forEach(item => {
          item.addEventListener('click', async () => {
            const addressId = item.dataset.addressId;
            const addressTitle = item.dataset.address;
            const token = getToken();
            try {
              const response = await fetch('/user/usermain/selectaddress', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ addressId })
              });
              if (response.ok) {
                selectedAddress.textContent = addressTitle;
                document.querySelectorAll('.address-item').forEach(item => item.classList.remove('bg-blue-100'));
                item.classList.add('bg-blue-100');
                addressDropdown.classList.add('hidden');
                showNotification('Adres başarıyla seçildi', 'success');
              } else {
                const result = await response.json();
                showNotification(result.error || 'Adres seçilemedi', 'error');
              }
            } catch (error) {
              console.error('Adres seçme hatası:', error);
              showNotification('Adres seçilirken hata oluştu', 'error');
            }
          });
        });
      } catch (error) {
        console.error('Adresler alınamadı:', error);
        addressList.innerHTML = '<li class="text-red-500 text-sm px-2 py-2">Adresler yüklenemedi</li>';
      }

      document.getElementById('searchInput').classList.add('search-input');

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('animate__animated', 'animate__fadeInUp');
          }
        });
      }, { threshold: 0.1, rootMargin: '0px 0px -30px 0px' });

      document.querySelectorAll('.account-card').forEach(el => observer.observe(el));

      document.querySelectorAll('.account-card').forEach(card => {
        card.addEventListener('mouseenter', () => card.querySelector('.text-2xl')?.classList.add('animate__animated', 'animate__pulse'));
        card.addEventListener('mouseleave', () => card.querySelector('.text-2xl')?.classList.remove('animate__animated', 'animate__pulse'));
      });
    });

    // Search functionality
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('keypress', e => {
      if (e.key === 'Enter' && e.target.value.trim()) {
        window.location.href = `/user/usermain?search=${encodeURIComponent(e.target.value.trim())}`;
      }
    });

    // Logout function
    async function logout() {
      try {
        const response = await fetch('/account/user/usermain/logout', {
          method: 'POST',
          credentials: 'include'
        });
        if (response.ok) {
          window.location.href = '/';
        } else {
          showNotification('Çıkış yapılamadı!', 'error');
        }
      } catch (error) {
        showNotification('Bağlantı hatası!', 'error');
      }
    }
  </script>

</body>

</html>